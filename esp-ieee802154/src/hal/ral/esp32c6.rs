#![doc = "Peripheral access API for GENERATED microcontrollers (generated using svd2rust v0.31.3 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.31.3/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
use core::{marker::PhantomData, ops::Deref};

#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)"]
    pub trait RawReg:
        Copy
        + Default
        + From<bool>
        + core::ops::BitOr<Output = Self>
        + core::ops::BitAnd<Output = Self>
        + core::ops::BitOrAssign
        + core::ops::BitAndAssign
        + core::ops::Not<Output = Self>
        + core::ops::Shl<u8, Output = Self>
    {
        #[doc = " Mask for bits of width `WI`"]
        fn mask<const WI: u8>() -> Self;
        #[doc = " Mask for bits of width 1"]
        fn one() -> Self;
    }
    macro_rules! raw_reg {
        ($ U : ty , $ size : literal , $ mask : ident) => {
            impl RawReg for $U {
                #[inline(always)]
                fn mask<const WI: u8>() -> Self {
                    $mask::<WI>()
                }
                #[inline(always)]
                fn one() -> Self {
                    1
                }
            }
            const fn $mask<const WI: u8>() -> $U {
                <$U>::MAX >> ($size - WI)
            }
            impl FieldSpec for $U {
                type Ux = $U;
            }
        };
    }
    raw_reg!(u8, 8, mask_u8);
    raw_reg!(u16, 16, mask_u16);
    raw_reg!(u32, 32, mask_u32);
    raw_reg!(u64, 64, mask_u64);
    #[doc = " Raw register type"]
    pub trait RegisterSpec {
        #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)."]
        type Ux: RawReg;
    }
    #[doc = " Raw field type"]
    pub trait FieldSpec: Sized {
        #[doc = " Raw field type (`u8`, `u16`, `u32`, ...)."]
        type Ux: Copy + PartialEq + From<Self>;
    }
    #[doc = " Trait implemented by readable registers to enable the `read` method."]
    #[doc = ""]
    #[doc = " Registers marked with `Writable` can be also be `modify`'ed."]
    pub trait Readable: RegisterSpec {}
    #[doc = " Trait implemented by writeable registers."]
    #[doc = ""]
    #[doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
    #[doc = ""]
    #[doc = " Registers marked with `Readable` can be also be `modify`'ed."]
    pub trait Writable: RegisterSpec {
        #[doc = " Specifies the register bits that are not changed if you pass `1` and are changed if you pass `0`"]
        const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux;
        #[doc = " Specifies the register bits that are not changed if you pass `0` and are changed if you pass `1`"]
        const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux;
    }
    #[doc = " Reset value of the register."]
    #[doc = ""]
    #[doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
    #[doc = " register by using the `reset` method."]
    pub trait Resettable: RegisterSpec {
        #[doc = " Reset value of the register."]
        const RESET_VALUE: Self::Ux;
        #[doc = " Reset value of the register."]
        #[inline(always)]
        fn reset_value() -> Self::Ux {
            Self::RESET_VALUE
        }
    }
    #[doc = " This structure provides volatile access to registers."]
    #[repr(transparent)]
    pub struct Reg<REG: RegisterSpec> {
        register: vcell::VolatileCell<REG::Ux>,
        _marker: marker::PhantomData<REG>,
    }
    unsafe impl<REG: RegisterSpec> Send for Reg<REG> where REG::Ux: Send {}
    impl<REG: RegisterSpec> Reg<REG> {
        #[doc = " Returns the underlying memory address of register."]
        #[doc = ""]
        #[doc = " ```ignore"]
        #[doc = " let reg_ptr = periph.reg.as_ptr();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn as_ptr(&self) -> *mut REG::Ux {
            self.register.as_ptr()
        }
    }
    impl<REG: Readable> Reg<REG> {
        #[doc = " Reads the contents of a `Readable` register."]
        #[doc = ""]
        #[doc = " You can read the raw contents of a register by using `bits`:"]
        #[doc = " ```ignore"]
        #[doc = " let bits = periph.reg.read().bits();"]
        #[doc = " ```"]
        #[doc = " or get the content of a particular field of a register:"]
        #[doc = " ```ignore"]
        #[doc = " let reader = periph.reg.read();"]
        #[doc = " let bits = reader.field1().bits();"]
        #[doc = " let flag = reader.field2().bit_is_set();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn read(&self) -> R<REG> {
            R {
                bits: self.register.get(),
                _reg: marker::PhantomData,
            }
        }
    }
    impl<REG: Resettable + Writable> Reg<REG> {
        #[doc = " Writes the reset value to `Writable` register."]
        #[doc = ""]
        #[doc = " Resets the register to its initial state."]
        #[inline(always)]
        pub fn reset(&self) {
            self.register.set(REG::RESET_VALUE)
        }
        #[doc = " Writes bits to a `Writable` register."]
        #[doc = ""]
        #[doc = " You can write raw bits into a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
        #[doc = " ```"]
        #[doc = " or write only the fields you need:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " or an alternative way of saying the same:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| {"]
        #[doc = "     w.field1().bits(newfield1bits);"]
        #[doc = "     w.field2().set_bit();"]
        #[doc = "     w.field3().variant(VARIANT)"]
        #[doc = " });"]
        #[doc = " ```"]
        #[doc = " In the latter case, other fields will be set to their reset value."]
        #[inline(always)]
        pub fn write<F>(&self, f: F)
        where
            F: FnOnce(&mut W<REG>) -> &mut W<REG>,
        {
            self.register.set(
                f(&mut W {
                    bits: REG::RESET_VALUE & !REG::ONE_TO_MODIFY_FIELDS_BITMAP
                        | REG::ZERO_TO_MODIFY_FIELDS_BITMAP,
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<REG: Writable> Reg<REG> {
        #[doc = " Writes 0 to a `Writable` register."]
        #[doc = ""]
        #[doc = " Similar to `write`, but unused bits will contain 0."]
        #[doc = ""]
        #[doc = " # Safety"]
        #[doc = ""]
        #[doc = " Unsafe to use with registers which don't allow to write 0."]
        #[inline(always)]
        pub unsafe fn write_with_zero<F>(&self, f: F)
        where
            F: FnOnce(&mut W<REG>) -> &mut W<REG>,
        {
            self.register.set(
                f(&mut W {
                    bits: REG::Ux::default(),
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<REG: Readable + Writable> Reg<REG> {
        #[doc = " Modifies the contents of the register by reading and then writing it."]
        #[doc = ""]
        #[doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
        #[doc = "    r.bits() | 3"]
        #[doc = " ) });"]
        #[doc = " ```"]
        #[doc = " or"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|_, w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " or an alternative way of saying the same:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|_, w| {"]
        #[doc = "     w.field1().bits(newfield1bits);"]
        #[doc = "     w.field2().set_bit();"]
        #[doc = "     w.field3().variant(VARIANT)"]
        #[doc = " });"]
        #[doc = " ```"]
        #[doc = " Other fields will have the value they had before the call to `modify`."]
        #[inline(always)]
        pub fn modify<F>(&self, f: F)
        where
            for<'w> F: FnOnce(&R<REG>, &'w mut W<REG>) -> &'w mut W<REG>,
        {
            let bits = self.register.get();
            self.register.set(
                f(
                    &R {
                        bits,
                        _reg: marker::PhantomData,
                    },
                    &mut W {
                        bits: bits & !REG::ONE_TO_MODIFY_FIELDS_BITMAP
                            | REG::ZERO_TO_MODIFY_FIELDS_BITMAP,
                        _reg: marker::PhantomData,
                    },
                )
                .bits,
            );
        }
    }
    #[doc(hidden)]
    pub mod raw {
        use super::{marker, BitM, FieldSpec, RegisterSpec, Unsafe, Writable};
        pub struct R<REG: RegisterSpec> {
            pub(crate) bits: REG::Ux,
            pub(super) _reg: marker::PhantomData<REG>,
        }
        pub struct W<REG: RegisterSpec> {
            #[doc = "Writable bits"]
            pub(crate) bits: REG::Ux,
            pub(super) _reg: marker::PhantomData<REG>,
        }
        pub struct FieldReader<FI = u8>
        where
            FI: FieldSpec,
        {
            pub(crate) bits: FI::Ux,
            _reg: marker::PhantomData<FI>,
        }
        impl<FI: FieldSpec> FieldReader<FI> {
            #[doc = " Creates a new instance of the reader."]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) const fn new(bits: FI::Ux) -> Self {
                Self {
                    bits,
                    _reg: marker::PhantomData,
                }
            }
        }
        pub struct BitReader<FI = bool> {
            pub(crate) bits: bool,
            _reg: marker::PhantomData<FI>,
        }
        impl<FI> BitReader<FI> {
            #[doc = " Creates a new instance of the reader."]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) const fn new(bits: bool) -> Self {
                Self {
                    bits,
                    _reg: marker::PhantomData,
                }
            }
        }
        pub struct FieldWriter<'a, REG, const WI: u8, FI = u8, Safety = Unsafe>
        where
            REG: Writable + RegisterSpec,
            FI: FieldSpec,
        {
            pub(crate) w: &'a mut W<REG>,
            pub(crate) o: u8,
            _field: marker::PhantomData<(FI, Safety)>,
        }
        impl<'a, REG, const WI: u8, FI, Safety> FieldWriter<'a, REG, WI, FI, Safety>
        where
            REG: Writable + RegisterSpec,
            FI: FieldSpec,
        {
            #[doc = " Creates a new instance of the writer"]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) fn new(w: &'a mut W<REG>, o: u8) -> Self {
                Self {
                    w,
                    o,
                    _field: marker::PhantomData,
                }
            }
        }
        pub struct BitWriter<'a, REG, FI = bool, M = BitM>
        where
            REG: Writable + RegisterSpec,
            bool: From<FI>,
        {
            pub(crate) w: &'a mut W<REG>,
            pub(crate) o: u8,
            _field: marker::PhantomData<(FI, M)>,
        }
        impl<'a, REG, FI, M> BitWriter<'a, REG, FI, M>
        where
            REG: Writable + RegisterSpec,
            bool: From<FI>,
        {
            #[doc = " Creates a new instance of the writer"]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) fn new(w: &'a mut W<REG>, o: u8) -> Self {
                Self {
                    w,
                    o,
                    _field: marker::PhantomData,
                }
            }
        }
    }
    #[doc = " Register reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
    #[doc = " method."]
    pub type R<REG> = raw::R<REG>;
    impl<REG: RegisterSpec> R<REG> {
        #[doc = " Reads raw bits from register."]
        #[inline(always)]
        pub const fn bits(&self) -> REG::Ux {
            self.bits
        }
    }
    impl<REG: RegisterSpec, FI> PartialEq<FI> for R<REG>
    where
        REG::Ux: PartialEq,
        FI: Copy,
        REG::Ux: From<FI>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&REG::Ux::from(*other))
        }
    }
    #[doc = " Register writer."]
    #[doc = ""]
    #[doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
    pub type W<REG> = raw::W<REG>;
    #[doc = " Field reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of fields."]
    pub type FieldReader<FI = u8> = raw::FieldReader<FI>;
    #[doc = " Bit-wise field reader"]
    pub type BitReader<FI = bool> = raw::BitReader<FI>;
    impl<FI: FieldSpec> FieldReader<FI> {
        #[doc = " Reads raw bits from field."]
        #[inline(always)]
        pub const fn bits(&self) -> FI::Ux {
            self.bits
        }
    }
    impl<FI> PartialEq<FI> for FieldReader<FI>
    where
        FI: FieldSpec + Copy,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&FI::Ux::from(*other))
        }
    }
    impl<FI> PartialEq<FI> for BitReader<FI>
    where
        FI: Copy,
        bool: From<FI>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&bool::from(*other))
        }
    }
    impl<FI> BitReader<FI> {
        #[doc = " Value of the field as raw bits."]
        #[inline(always)]
        pub const fn bit(&self) -> bool {
            self.bits
        }
        #[doc = " Returns `true` if the bit is clear (0)."]
        #[inline(always)]
        pub const fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = " Returns `true` if the bit is set (1)."]
        #[inline(always)]
        pub const fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    #[doc(hidden)]
    pub struct Safe;
    #[doc(hidden)]
    pub struct Unsafe;
    #[doc = " Write field Proxy with unsafe `bits`"]
    pub type FieldWriter<'a, REG, const WI: u8, FI = u8> =
        raw::FieldWriter<'a, REG, WI, FI, Unsafe>;
    #[doc = " Write field Proxy with safe `bits`"]
    pub type FieldWriterSafe<'a, REG, const WI: u8, FI = u8> =
        raw::FieldWriter<'a, REG, WI, FI, Safe>;
    impl<'a, REG, const WI: u8, FI> FieldWriter<'a, REG, WI, FI>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
        REG::Ux: From<FI::Ux>,
    {
        #[doc = " Field width"]
        pub const WIDTH: u8 = WI;
        #[doc = " Field width"]
        #[inline(always)]
        pub const fn width(&self) -> u8 {
            WI
        }
        #[doc = " Field offset"]
        #[inline(always)]
        pub const fn offset(&self) -> u8 {
            self.o
        }
        #[doc = " Writes raw bits to the field"]
        #[doc = ""]
        #[doc = " # Safety"]
        #[doc = ""]
        #[doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
        #[inline(always)]
        pub unsafe fn bits(self, value: FI::Ux) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::mask::<WI>() << self.o);
            self.w.bits |= (REG::Ux::from(value) & REG::Ux::mask::<WI>()) << self.o;
            self.w
        }
        #[doc = " Writes `variant` to the field"]
        #[inline(always)]
        pub fn variant(self, variant: FI) -> &'a mut W<REG> {
            unsafe { self.bits(FI::Ux::from(variant)) }
        }
    }
    impl<'a, REG, const WI: u8, FI> FieldWriterSafe<'a, REG, WI, FI>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
        REG::Ux: From<FI::Ux>,
    {
        #[doc = " Field width"]
        pub const WIDTH: u8 = WI;
        #[doc = " Field width"]
        #[inline(always)]
        pub const fn width(&self) -> u8 {
            WI
        }
        #[doc = " Field offset"]
        #[inline(always)]
        pub const fn offset(&self) -> u8 {
            self.o
        }
        #[doc = " Writes raw bits to the field"]
        #[inline(always)]
        pub fn bits(self, value: FI::Ux) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::mask::<WI>() << self.o);
            self.w.bits |= (REG::Ux::from(value) & REG::Ux::mask::<WI>()) << self.o;
            self.w
        }
        #[doc = " Writes `variant` to the field"]
        #[inline(always)]
        pub fn variant(self, variant: FI) -> &'a mut W<REG> {
            self.bits(FI::Ux::from(variant))
        }
    }
    macro_rules! bit_proxy {
        ($ writer : ident , $ mwv : ident) => {
            #[doc(hidden)]
            pub struct $mwv;
            #[doc = " Bit-wise write field proxy"]
            pub type $writer<'a, REG, FI = bool> = raw::BitWriter<'a, REG, FI, $mwv>;
            impl<'a, REG, FI> $writer<'a, REG, FI>
            where
                REG: Writable + RegisterSpec,
                bool: From<FI>,
            {
                #[doc = " Field width"]
                pub const WIDTH: u8 = 1;
                #[doc = " Field width"]
                #[inline(always)]
                pub const fn width(&self) -> u8 {
                    Self::WIDTH
                }
                #[doc = " Field offset"]
                #[inline(always)]
                pub const fn offset(&self) -> u8 {
                    self.o
                }
                #[doc = " Writes bit to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W<REG> {
                    self.w.bits &= !(REG::Ux::one() << self.o);
                    self.w.bits |= (REG::Ux::from(value) & REG::Ux::one()) << self.o;
                    self.w
                }
                #[doc = " Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: FI) -> &'a mut W<REG> {
                    self.bit(bool::from(variant))
                }
            }
        };
    }
    bit_proxy!(BitWriter, BitM);
    bit_proxy!(BitWriter1S, Bit1S);
    bit_proxy!(BitWriter0C, Bit0C);
    bit_proxy!(BitWriter1C, Bit1C);
    bit_proxy!(BitWriter0S, Bit0S);
    bit_proxy!(BitWriter1T, Bit1T);
    bit_proxy!(BitWriter0T, Bit0T);
    impl<'a, REG, FI> BitWriter<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Sets the field bit"]
        #[inline(always)]
        pub fn set_bit(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
        #[doc = " Clears the field bit"]
        #[inline(always)]
        pub fn clear_bit(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter1S<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Sets the field bit"]
        #[inline(always)]
        pub fn set_bit(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter0C<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Clears the field bit"]
        #[inline(always)]
        pub fn clear_bit(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter1C<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Clears the field bit by passing one"]
        #[inline(always)]
        pub fn clear_bit_by_one(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter0S<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Sets the field bit by passing zero"]
        #[inline(always)]
        pub fn set_bit_by_zero(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter1T<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Toggle the field bit by passing one"]
        #[inline(always)]
        pub fn toggle_bit(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter0T<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Toggle the field bit by passing zero"]
        #[inline(always)]
        pub fn toggle_bit(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
}
#[cfg(feature = "rt")]
extern "C" {}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 0] = [];
#[doc = "ieee802154"]
pub struct IEEE802154 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for IEEE802154 {}
impl IEEE802154 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ieee802154::RegisterBlock = 0x600a_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ieee802154::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for IEEE802154 {
    type Target = ieee802154::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for IEEE802154 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IEEE802154").finish()
    }
}
#[doc = "ieee802154"]
pub mod ieee802154 {
    #[doc = r"Register block"]
    #[repr(C)]
    pub struct RegisterBlock {
        command: COMMAND,
        ctrl_cfg: CTRL_CFG,
        inf0_short_addr: INF0_SHORT_ADDR,
        inf0_pan_id: INF0_PAN_ID,
        inf0_extend_addr0: INF0_EXTEND_ADDR0,
        inf0_extend_addr1: INF0_EXTEND_ADDR1,
        inf1_short_addr: INF1_SHORT_ADDR,
        inf1_pan_id: INF1_PAN_ID,
        inf1_extend_addr0: INF1_EXTEND_ADDR0,
        inf1_extend_addr1: INF1_EXTEND_ADDR1,
        inf2_short_addr: INF2_SHORT_ADDR,
        inf2_pan_id: INF2_PAN_ID,
        inf2_extend_addr0: INF2_EXTEND_ADDR0,
        inf2_extend_addr1: INF2_EXTEND_ADDR1,
        inf3_short_addr: INF3_SHORT_ADDR,
        inf3_pan_id: INF3_PAN_ID,
        inf3_extend_addr0: INF3_EXTEND_ADDR0,
        inf3_extend_addr1: INF3_EXTEND_ADDR1,
        channel: CHANNEL,
        tx_power: TX_POWER,
        ed_scan_duration: ED_SCAN_DURATION,
        ed_scan_cfg: ED_SCAN_CFG,
        ifs: IFS,
        ack_timeout: ACK_TIMEOUT,
        event_en: EVENT_EN,
        event_status: EVENT_STATUS,
        rx_abort_intr_ctrl: RX_ABORT_INTR_CTRL,
        ack_frame_pending_en: ACK_FRAME_PENDING_EN,
        coex_pti: COEX_PTI,
        core_dummy_data: CORE_DUMMY_DATA,
        tx_abort_interrupt_control: TX_ABORT_INTERRUPT_CONTROL,
        enhance_ack_cfg: ENHANCE_ACK_CFG,
        rx_status: RX_STATUS,
        tx_status: TX_STATUS,
        txrx_status: TXRX_STATUS,
        tx_ccm_schedule_status: TX_CCM_SCHEDULE_STATUS,
        core_gck_cfg: CORE_GCK_CFG,
        test_control: TEST_CONTROL,
        dtm_config: DTM_CONFIG,
        dtm_tx_pkt_config: DTM_TX_PKT_CONFIG,
        dtm_pkt_counter: DTM_PKT_COUNTER,
        rx_length: RX_LENGTH,
        time0_threshold: TIME0_THRESHOLD,
        time0_value: TIME0_VALUE,
        time1_threshold: TIME1_THRESHOLD,
        time1_value: TIME1_VALUE,
        clk_counter_match_val: CLK_COUNTER_MATCH_VAL,
        clk_counter: CLK_COUNTER,
        ifs_counter: IFS_COUNTER,
        sfd_wait_symbol: SFD_WAIT_SYMBOL,
        txrx_path_delay: TXRX_PATH_DELAY,
        bb_clk: BB_CLK,
        txdma_addr: TXDMA_ADDR,
        txdma_ctrl_state: TXDMA_CTRL_STATE,
        txdma_err: TXDMA_ERR,
        _reserved55: [u8; 0x04],
        rxdma_addr: RXDMA_ADDR,
        rxdma_ctrl_state: RXDMA_CTRL_STATE,
        rxdma_err: RXDMA_ERR,
        _reserved58: [u8; 0x04],
        dma_gck_cfg: DMA_GCK_CFG,
        dma_dummy: DMA_DUMMY,
        _reserved60: [u8; 0x08],
        paon_delay: PAON_DELAY,
        txon_delay: TXON_DELAY,
        txen_stop_delay: TXEN_STOP_DELAY,
        txoff_delay: TXOFF_DELAY,
        rxon_delay: RXON_DELAY,
        txrx_switch_delay: TXRX_SWITCH_DELAY,
        cont_rx_delay: CONT_RX_DELAY,
        dcdc_ctrl: DCDC_CTRL,
        debug_ctrl: DEBUG_CTRL,
        _reserved69: [u8; 0x04],
        sec_ctrl: SEC_CTRL,
        sec_extend_address0: SEC_EXTEND_ADDRESS0,
        sec_extend_address1: SEC_EXTEND_ADDRESS1,
        sec_key0: SEC_KEY0,
        sec_key1: SEC_KEY1,
        sec_key2: SEC_KEY2,
        sec_key3: SEC_KEY3,
        sfd_timeout_cnt: SFD_TIMEOUT_CNT,
        crc_error_cnt: CRC_ERROR_CNT,
        ed_abort_cnt: ED_ABORT_CNT,
        cca_fail_cnt: CCA_FAIL_CNT,
        rx_filter_fail_cnt: RX_FILTER_FAIL_CNT,
        no_rss_detect_cnt: NO_RSS_DETECT_CNT,
        rx_abort_coex_cnt: RX_ABORT_COEX_CNT,
        rx_restart_cnt: RX_RESTART_CNT,
        tx_ack_abort_coex_cnt: TX_ACK_ABORT_COEX_CNT,
        ed_scan_coex_cnt: ED_SCAN_COEX_CNT,
        rx_ack_abort_coex_cnt: RX_ACK_ABORT_COEX_CNT,
        rx_ack_timeout_cnt: RX_ACK_TIMEOUT_CNT,
        tx_break_coex_cnt: TX_BREAK_COEX_CNT,
        tx_security_error_cnt: TX_SECURITY_ERROR_CNT,
        cca_busy_cnt: CCA_BUSY_CNT,
        error_cnt_clear: ERROR_CNT_CLEAR,
        mac_date: MAC_DATE,
    }
    impl RegisterBlock {
        #[doc = "0x00 - "]
        #[inline(always)]
        pub const fn command(&self) -> &COMMAND {
            &self.command
        }
        #[doc = "0x04 - "]
        #[inline(always)]
        pub const fn ctrl_cfg(&self) -> &CTRL_CFG {
            &self.ctrl_cfg
        }
        #[doc = "0x08 - "]
        #[inline(always)]
        pub const fn inf0_short_addr(&self) -> &INF0_SHORT_ADDR {
            &self.inf0_short_addr
        }
        #[doc = "0x0c - "]
        #[inline(always)]
        pub const fn inf0_pan_id(&self) -> &INF0_PAN_ID {
            &self.inf0_pan_id
        }
        #[doc = "0x10 - "]
        #[inline(always)]
        pub const fn inf0_extend_addr0(&self) -> &INF0_EXTEND_ADDR0 {
            &self.inf0_extend_addr0
        }
        #[doc = "0x14 - "]
        #[inline(always)]
        pub const fn inf0_extend_addr1(&self) -> &INF0_EXTEND_ADDR1 {
            &self.inf0_extend_addr1
        }
        #[doc = "0x18 - "]
        #[inline(always)]
        pub const fn inf1_short_addr(&self) -> &INF1_SHORT_ADDR {
            &self.inf1_short_addr
        }
        #[doc = "0x1c - "]
        #[inline(always)]
        pub const fn inf1_pan_id(&self) -> &INF1_PAN_ID {
            &self.inf1_pan_id
        }
        #[doc = "0x20 - "]
        #[inline(always)]
        pub const fn inf1_extend_addr0(&self) -> &INF1_EXTEND_ADDR0 {
            &self.inf1_extend_addr0
        }
        #[doc = "0x24 - "]
        #[inline(always)]
        pub const fn inf1_extend_addr1(&self) -> &INF1_EXTEND_ADDR1 {
            &self.inf1_extend_addr1
        }
        #[doc = "0x28 - "]
        #[inline(always)]
        pub const fn inf2_short_addr(&self) -> &INF2_SHORT_ADDR {
            &self.inf2_short_addr
        }
        #[doc = "0x2c - "]
        #[inline(always)]
        pub const fn inf2_pan_id(&self) -> &INF2_PAN_ID {
            &self.inf2_pan_id
        }
        #[doc = "0x30 - "]
        #[inline(always)]
        pub const fn inf2_extend_addr0(&self) -> &INF2_EXTEND_ADDR0 {
            &self.inf2_extend_addr0
        }
        #[doc = "0x34 - "]
        #[inline(always)]
        pub const fn inf2_extend_addr1(&self) -> &INF2_EXTEND_ADDR1 {
            &self.inf2_extend_addr1
        }
        #[doc = "0x38 - "]
        #[inline(always)]
        pub const fn inf3_short_addr(&self) -> &INF3_SHORT_ADDR {
            &self.inf3_short_addr
        }
        #[doc = "0x3c - "]
        #[inline(always)]
        pub const fn inf3_pan_id(&self) -> &INF3_PAN_ID {
            &self.inf3_pan_id
        }
        #[doc = "0x40 - "]
        #[inline(always)]
        pub const fn inf3_extend_addr0(&self) -> &INF3_EXTEND_ADDR0 {
            &self.inf3_extend_addr0
        }
        #[doc = "0x44 - "]
        #[inline(always)]
        pub const fn inf3_extend_addr1(&self) -> &INF3_EXTEND_ADDR1 {
            &self.inf3_extend_addr1
        }
        #[doc = "0x48 - "]
        #[inline(always)]
        pub const fn channel(&self) -> &CHANNEL {
            &self.channel
        }
        #[doc = "0x4c - "]
        #[inline(always)]
        pub const fn tx_power(&self) -> &TX_POWER {
            &self.tx_power
        }
        #[doc = "0x50 - "]
        #[inline(always)]
        pub const fn ed_scan_duration(&self) -> &ED_SCAN_DURATION {
            &self.ed_scan_duration
        }
        #[doc = "0x54 - "]
        #[inline(always)]
        pub const fn ed_scan_cfg(&self) -> &ED_SCAN_CFG {
            &self.ed_scan_cfg
        }
        #[doc = "0x58 - "]
        #[inline(always)]
        pub const fn ifs(&self) -> &IFS {
            &self.ifs
        }
        #[doc = "0x5c - "]
        #[inline(always)]
        pub const fn ack_timeout(&self) -> &ACK_TIMEOUT {
            &self.ack_timeout
        }
        #[doc = "0x60 - "]
        #[inline(always)]
        pub const fn event_en(&self) -> &EVENT_EN {
            &self.event_en
        }
        #[doc = "0x64 - "]
        #[inline(always)]
        pub const fn event_status(&self) -> &EVENT_STATUS {
            &self.event_status
        }
        #[doc = "0x68 - "]
        #[inline(always)]
        pub const fn rx_abort_intr_ctrl(&self) -> &RX_ABORT_INTR_CTRL {
            &self.rx_abort_intr_ctrl
        }
        #[doc = "0x6c - "]
        #[inline(always)]
        pub const fn ack_frame_pending_en(&self) -> &ACK_FRAME_PENDING_EN {
            &self.ack_frame_pending_en
        }
        #[doc = "0x70 - "]
        #[inline(always)]
        pub const fn coex_pti(&self) -> &COEX_PTI {
            &self.coex_pti
        }
        #[doc = "0x74 - "]
        #[inline(always)]
        pub const fn core_dummy_data(&self) -> &CORE_DUMMY_DATA {
            &self.core_dummy_data
        }
        #[doc = "0x78 - "]
        #[inline(always)]
        pub const fn tx_abort_interrupt_control(&self) -> &TX_ABORT_INTERRUPT_CONTROL {
            &self.tx_abort_interrupt_control
        }
        #[doc = "0x7c - "]
        #[inline(always)]
        pub const fn enhance_ack_cfg(&self) -> &ENHANCE_ACK_CFG {
            &self.enhance_ack_cfg
        }
        #[doc = "0x80 - "]
        #[inline(always)]
        pub const fn rx_status(&self) -> &RX_STATUS {
            &self.rx_status
        }
        #[doc = "0x84 - "]
        #[inline(always)]
        pub const fn tx_status(&self) -> &TX_STATUS {
            &self.tx_status
        }
        #[doc = "0x88 - "]
        #[inline(always)]
        pub const fn txrx_status(&self) -> &TXRX_STATUS {
            &self.txrx_status
        }
        #[doc = "0x8c - "]
        #[inline(always)]
        pub const fn tx_ccm_schedule_status(&self) -> &TX_CCM_SCHEDULE_STATUS {
            &self.tx_ccm_schedule_status
        }
        #[doc = "0x90 - "]
        #[inline(always)]
        pub const fn core_gck_cfg(&self) -> &CORE_GCK_CFG {
            &self.core_gck_cfg
        }
        #[doc = "0x94 - "]
        #[inline(always)]
        pub const fn test_control(&self) -> &TEST_CONTROL {
            &self.test_control
        }
        #[doc = "0x98 - "]
        #[inline(always)]
        pub const fn dtm_config(&self) -> &DTM_CONFIG {
            &self.dtm_config
        }
        #[doc = "0x9c - "]
        #[inline(always)]
        pub const fn dtm_tx_pkt_config(&self) -> &DTM_TX_PKT_CONFIG {
            &self.dtm_tx_pkt_config
        }
        #[doc = "0xa0 - "]
        #[inline(always)]
        pub const fn dtm_pkt_counter(&self) -> &DTM_PKT_COUNTER {
            &self.dtm_pkt_counter
        }
        #[doc = "0xa4 - "]
        #[inline(always)]
        pub const fn rx_length(&self) -> &RX_LENGTH {
            &self.rx_length
        }
        #[doc = "0xa8 - "]
        #[inline(always)]
        pub const fn time0_threshold(&self) -> &TIME0_THRESHOLD {
            &self.time0_threshold
        }
        #[doc = "0xac - "]
        #[inline(always)]
        pub const fn time0_value(&self) -> &TIME0_VALUE {
            &self.time0_value
        }
        #[doc = "0xb0 - "]
        #[inline(always)]
        pub const fn time1_threshold(&self) -> &TIME1_THRESHOLD {
            &self.time1_threshold
        }
        #[doc = "0xb4 - "]
        #[inline(always)]
        pub const fn time1_value(&self) -> &TIME1_VALUE {
            &self.time1_value
        }
        #[doc = "0xb8 - "]
        #[inline(always)]
        pub const fn clk_counter_match_val(&self) -> &CLK_COUNTER_MATCH_VAL {
            &self.clk_counter_match_val
        }
        #[doc = "0xbc - "]
        #[inline(always)]
        pub const fn clk_counter(&self) -> &CLK_COUNTER {
            &self.clk_counter
        }
        #[doc = "0xc0 - "]
        #[inline(always)]
        pub const fn ifs_counter(&self) -> &IFS_COUNTER {
            &self.ifs_counter
        }
        #[doc = "0xc4 - "]
        #[inline(always)]
        pub const fn sfd_wait_symbol(&self) -> &SFD_WAIT_SYMBOL {
            &self.sfd_wait_symbol
        }
        #[doc = "0xc8 - "]
        #[inline(always)]
        pub const fn txrx_path_delay(&self) -> &TXRX_PATH_DELAY {
            &self.txrx_path_delay
        }
        #[doc = "0xcc - "]
        #[inline(always)]
        pub const fn bb_clk(&self) -> &BB_CLK {
            &self.bb_clk
        }
        #[doc = "0xd0 - "]
        #[inline(always)]
        pub const fn txdma_addr(&self) -> &TXDMA_ADDR {
            &self.txdma_addr
        }
        #[doc = "0xd4 - "]
        #[inline(always)]
        pub const fn txdma_ctrl_state(&self) -> &TXDMA_CTRL_STATE {
            &self.txdma_ctrl_state
        }
        #[doc = "0xd8 - "]
        #[inline(always)]
        pub const fn txdma_err(&self) -> &TXDMA_ERR {
            &self.txdma_err
        }
        #[doc = "0xe0 - "]
        #[inline(always)]
        pub const fn rxdma_addr(&self) -> &RXDMA_ADDR {
            &self.rxdma_addr
        }
        #[doc = "0xe4 - "]
        #[inline(always)]
        pub const fn rxdma_ctrl_state(&self) -> &RXDMA_CTRL_STATE {
            &self.rxdma_ctrl_state
        }
        #[doc = "0xe8 - "]
        #[inline(always)]
        pub const fn rxdma_err(&self) -> &RXDMA_ERR {
            &self.rxdma_err
        }
        #[doc = "0xf0 - "]
        #[inline(always)]
        pub const fn dma_gck_cfg(&self) -> &DMA_GCK_CFG {
            &self.dma_gck_cfg
        }
        #[doc = "0xf4 - "]
        #[inline(always)]
        pub const fn dma_dummy(&self) -> &DMA_DUMMY {
            &self.dma_dummy
        }
        #[doc = "0x100 - "]
        #[inline(always)]
        pub const fn paon_delay(&self) -> &PAON_DELAY {
            &self.paon_delay
        }
        #[doc = "0x104 - "]
        #[inline(always)]
        pub const fn txon_delay(&self) -> &TXON_DELAY {
            &self.txon_delay
        }
        #[doc = "0x108 - "]
        #[inline(always)]
        pub const fn txen_stop_delay(&self) -> &TXEN_STOP_DELAY {
            &self.txen_stop_delay
        }
        #[doc = "0x10c - "]
        #[inline(always)]
        pub const fn txoff_delay(&self) -> &TXOFF_DELAY {
            &self.txoff_delay
        }
        #[doc = "0x110 - "]
        #[inline(always)]
        pub const fn rxon_delay(&self) -> &RXON_DELAY {
            &self.rxon_delay
        }
        #[doc = "0x114 - "]
        #[inline(always)]
        pub const fn txrx_switch_delay(&self) -> &TXRX_SWITCH_DELAY {
            &self.txrx_switch_delay
        }
        #[doc = "0x118 - "]
        #[inline(always)]
        pub const fn cont_rx_delay(&self) -> &CONT_RX_DELAY {
            &self.cont_rx_delay
        }
        #[doc = "0x11c - "]
        #[inline(always)]
        pub const fn dcdc_ctrl(&self) -> &DCDC_CTRL {
            &self.dcdc_ctrl
        }
        #[doc = "0x120 - "]
        #[inline(always)]
        pub const fn debug_ctrl(&self) -> &DEBUG_CTRL {
            &self.debug_ctrl
        }
        #[doc = "0x128 - "]
        #[inline(always)]
        pub const fn sec_ctrl(&self) -> &SEC_CTRL {
            &self.sec_ctrl
        }
        #[doc = "0x12c - "]
        #[inline(always)]
        pub const fn sec_extend_address0(&self) -> &SEC_EXTEND_ADDRESS0 {
            &self.sec_extend_address0
        }
        #[doc = "0x130 - "]
        #[inline(always)]
        pub const fn sec_extend_address1(&self) -> &SEC_EXTEND_ADDRESS1 {
            &self.sec_extend_address1
        }
        #[doc = "0x134 - "]
        #[inline(always)]
        pub const fn sec_key0(&self) -> &SEC_KEY0 {
            &self.sec_key0
        }
        #[doc = "0x138 - "]
        #[inline(always)]
        pub const fn sec_key1(&self) -> &SEC_KEY1 {
            &self.sec_key1
        }
        #[doc = "0x13c - "]
        #[inline(always)]
        pub const fn sec_key2(&self) -> &SEC_KEY2 {
            &self.sec_key2
        }
        #[doc = "0x140 - "]
        #[inline(always)]
        pub const fn sec_key3(&self) -> &SEC_KEY3 {
            &self.sec_key3
        }
        #[doc = "0x144 - "]
        #[inline(always)]
        pub const fn sfd_timeout_cnt(&self) -> &SFD_TIMEOUT_CNT {
            &self.sfd_timeout_cnt
        }
        #[doc = "0x148 - "]
        #[inline(always)]
        pub const fn crc_error_cnt(&self) -> &CRC_ERROR_CNT {
            &self.crc_error_cnt
        }
        #[doc = "0x14c - "]
        #[inline(always)]
        pub const fn ed_abort_cnt(&self) -> &ED_ABORT_CNT {
            &self.ed_abort_cnt
        }
        #[doc = "0x150 - "]
        #[inline(always)]
        pub const fn cca_fail_cnt(&self) -> &CCA_FAIL_CNT {
            &self.cca_fail_cnt
        }
        #[doc = "0x154 - "]
        #[inline(always)]
        pub const fn rx_filter_fail_cnt(&self) -> &RX_FILTER_FAIL_CNT {
            &self.rx_filter_fail_cnt
        }
        #[doc = "0x158 - "]
        #[inline(always)]
        pub const fn no_rss_detect_cnt(&self) -> &NO_RSS_DETECT_CNT {
            &self.no_rss_detect_cnt
        }
        #[doc = "0x15c - "]
        #[inline(always)]
        pub const fn rx_abort_coex_cnt(&self) -> &RX_ABORT_COEX_CNT {
            &self.rx_abort_coex_cnt
        }
        #[doc = "0x160 - "]
        #[inline(always)]
        pub const fn rx_restart_cnt(&self) -> &RX_RESTART_CNT {
            &self.rx_restart_cnt
        }
        #[doc = "0x164 - "]
        #[inline(always)]
        pub const fn tx_ack_abort_coex_cnt(&self) -> &TX_ACK_ABORT_COEX_CNT {
            &self.tx_ack_abort_coex_cnt
        }
        #[doc = "0x168 - "]
        #[inline(always)]
        pub const fn ed_scan_coex_cnt(&self) -> &ED_SCAN_COEX_CNT {
            &self.ed_scan_coex_cnt
        }
        #[doc = "0x16c - "]
        #[inline(always)]
        pub const fn rx_ack_abort_coex_cnt(&self) -> &RX_ACK_ABORT_COEX_CNT {
            &self.rx_ack_abort_coex_cnt
        }
        #[doc = "0x170 - "]
        #[inline(always)]
        pub const fn rx_ack_timeout_cnt(&self) -> &RX_ACK_TIMEOUT_CNT {
            &self.rx_ack_timeout_cnt
        }
        #[doc = "0x174 - "]
        #[inline(always)]
        pub const fn tx_break_coex_cnt(&self) -> &TX_BREAK_COEX_CNT {
            &self.tx_break_coex_cnt
        }
        #[doc = "0x178 - "]
        #[inline(always)]
        pub const fn tx_security_error_cnt(&self) -> &TX_SECURITY_ERROR_CNT {
            &self.tx_security_error_cnt
        }
        #[doc = "0x17c - "]
        #[inline(always)]
        pub const fn cca_busy_cnt(&self) -> &CCA_BUSY_CNT {
            &self.cca_busy_cnt
        }
        #[doc = "0x180 - "]
        #[inline(always)]
        pub const fn error_cnt_clear(&self) -> &ERROR_CNT_CLEAR {
            &self.error_cnt_clear
        }
        #[doc = "0x184 - "]
        #[inline(always)]
        pub const fn mac_date(&self) -> &MAC_DATE {
            &self.mac_date
        }
    }
    #[doc = "mac_date (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mac_date::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mac_date::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mac_date`] module"]
    pub type MAC_DATE = crate::hal::ral::Reg<mac_date::MAC_DATE_SPEC>;
    #[doc = ""]
    pub mod mac_date {
        #[doc = "Register `mac_date` reader"]
        pub type R = crate::hal::ral::R<MAC_DATE_SPEC>;
        #[doc = "Register `mac_date` writer"]
        pub type W = crate::hal::ral::W<MAC_DATE_SPEC>;
        #[doc = "Field `mac_date` reader - "]
        pub type MAC_DATE_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_date` writer - "]
        pub type MAC_DATE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_date(&self) -> MAC_DATE_R {
                MAC_DATE_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_date(&mut self) -> MAC_DATE_W<MAC_DATE_SPEC> {
                MAC_DATE_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mac_date::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mac_date::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct MAC_DATE_SPEC;
        impl crate::hal::ral::RegisterSpec for MAC_DATE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`mac_date::R`](R) reader structure"]
        impl crate::hal::ral::Readable for MAC_DATE_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`mac_date::W`](W) writer structure"]
        impl crate::hal::ral::Writable for MAC_DATE_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "error_cnt_clear (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`error_cnt_clear::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`error_cnt_clear::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@error_cnt_clear`] module"]
    pub type ERROR_CNT_CLEAR = crate::hal::ral::Reg<error_cnt_clear::ERROR_CNT_CLEAR_SPEC>;
    #[doc = ""]
    pub mod error_cnt_clear {
        #[doc = "Register `error_cnt_clear` reader"]
        pub type R = crate::hal::ral::R<ERROR_CNT_CLEAR_SPEC>;
        #[doc = "Register `error_cnt_clear` writer"]
        pub type W = crate::hal::ral::W<ERROR_CNT_CLEAR_SPEC>;
        #[doc = "Field `cca_busy_cnt_clear` reader - "]
        pub type CCA_BUSY_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `cca_busy_cnt_clear` writer - "]
        pub type CCA_BUSY_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `tx_security_error_cnt_clear` reader - "]
        pub type TX_SECURITY_ERROR_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `tx_security_error_cnt_clear` writer - "]
        pub type TX_SECURITY_ERROR_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `tx_break_coex_cnt_clear` reader - "]
        pub type TX_BREAK_COEX_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `tx_break_coex_cnt_clear` writer - "]
        pub type TX_BREAK_COEX_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rx_ack_timeout_cnt_clear` reader - "]
        pub type RX_ACK_TIMEOUT_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `rx_ack_timeout_cnt_clear` writer - "]
        pub type RX_ACK_TIMEOUT_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rx_ack_abort_coex_cnt_clear` reader - "]
        pub type RX_ACK_ABORT_COEX_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `rx_ack_abort_coex_cnt_clear` writer - "]
        pub type RX_ACK_ABORT_COEX_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `ed_scan_coex_cnt_clear` reader - "]
        pub type ED_SCAN_COEX_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `ed_scan_coex_cnt_clear` writer - "]
        pub type ED_SCAN_COEX_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `tx_ack_abort_coex_cnt_clear` reader - "]
        pub type TX_ACK_ABORT_COEX_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `tx_ack_abort_coex_cnt_clear` writer - "]
        pub type TX_ACK_ABORT_COEX_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rx_restart_cnt_clear` reader - "]
        pub type RX_RESTART_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `rx_restart_cnt_clear` writer - "]
        pub type RX_RESTART_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rx_abort_coex_cnt_clear` reader - "]
        pub type RX_ABORT_COEX_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `rx_abort_coex_cnt_clear` writer - "]
        pub type RX_ABORT_COEX_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `no_rss_detect_cnt_clear` reader - "]
        pub type NO_RSS_DETECT_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `no_rss_detect_cnt_clear` writer - "]
        pub type NO_RSS_DETECT_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rx_filter_fail_cnt_clear` reader - "]
        pub type RX_FILTER_FAIL_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `rx_filter_fail_cnt_clear` writer - "]
        pub type RX_FILTER_FAIL_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `cca_fail_cnt_clear` reader - "]
        pub type CCA_FAIL_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `cca_fail_cnt_clear` writer - "]
        pub type CCA_FAIL_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `ed_abort_cnt_clear` reader - "]
        pub type ED_ABORT_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `ed_abort_cnt_clear` writer - "]
        pub type ED_ABORT_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `crc_error_cnt_clear` reader - "]
        pub type CRC_ERROR_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `crc_error_cnt_clear` writer - "]
        pub type CRC_ERROR_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `sfd_timeout_cnt_clear` reader - "]
        pub type SFD_TIMEOUT_CNT_CLEAR_R = crate::hal::ral::BitReader;
        #[doc = "Field `sfd_timeout_cnt_clear` writer - "]
        pub type SFD_TIMEOUT_CNT_CLEAR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn cca_busy_cnt_clear(&self) -> CCA_BUSY_CNT_CLEAR_R {
                CCA_BUSY_CNT_CLEAR_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn tx_security_error_cnt_clear(&self) -> TX_SECURITY_ERROR_CNT_CLEAR_R {
                TX_SECURITY_ERROR_CNT_CLEAR_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            pub fn tx_break_coex_cnt_clear(&self) -> TX_BREAK_COEX_CNT_CLEAR_R {
                TX_BREAK_COEX_CNT_CLEAR_R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn rx_ack_timeout_cnt_clear(&self) -> RX_ACK_TIMEOUT_CNT_CLEAR_R {
                RX_ACK_TIMEOUT_CNT_CLEAR_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            pub fn rx_ack_abort_coex_cnt_clear(&self) -> RX_ACK_ABORT_COEX_CNT_CLEAR_R {
                RX_ACK_ABORT_COEX_CNT_CLEAR_R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn ed_scan_coex_cnt_clear(&self) -> ED_SCAN_COEX_CNT_CLEAR_R {
                ED_SCAN_COEX_CNT_CLEAR_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn tx_ack_abort_coex_cnt_clear(&self) -> TX_ACK_ABORT_COEX_CNT_CLEAR_R {
                TX_ACK_ABORT_COEX_CNT_CLEAR_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn rx_restart_cnt_clear(&self) -> RX_RESTART_CNT_CLEAR_R {
                RX_RESTART_CNT_CLEAR_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn rx_abort_coex_cnt_clear(&self) -> RX_ABORT_COEX_CNT_CLEAR_R {
                RX_ABORT_COEX_CNT_CLEAR_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn no_rss_detect_cnt_clear(&self) -> NO_RSS_DETECT_CNT_CLEAR_R {
                NO_RSS_DETECT_CNT_CLEAR_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn rx_filter_fail_cnt_clear(&self) -> RX_FILTER_FAIL_CNT_CLEAR_R {
                RX_FILTER_FAIL_CNT_CLEAR_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn cca_fail_cnt_clear(&self) -> CCA_FAIL_CNT_CLEAR_R {
                CCA_FAIL_CNT_CLEAR_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn ed_abort_cnt_clear(&self) -> ED_ABORT_CNT_CLEAR_R {
                ED_ABORT_CNT_CLEAR_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn crc_error_cnt_clear(&self) -> CRC_ERROR_CNT_CLEAR_R {
                CRC_ERROR_CNT_CLEAR_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn sfd_timeout_cnt_clear(&self) -> SFD_TIMEOUT_CNT_CLEAR_R {
                SFD_TIMEOUT_CNT_CLEAR_R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn cca_busy_cnt_clear(&mut self) -> CCA_BUSY_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                CCA_BUSY_CNT_CLEAR_W::new(self, 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            #[must_use]
            pub fn tx_security_error_cnt_clear(
                &mut self,
            ) -> TX_SECURITY_ERROR_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                TX_SECURITY_ERROR_CNT_CLEAR_W::new(self, 1)
            }
            #[doc = "Bit 2"]
            #[inline(always)]
            #[must_use]
            pub fn tx_break_coex_cnt_clear(
                &mut self,
            ) -> TX_BREAK_COEX_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                TX_BREAK_COEX_CNT_CLEAR_W::new(self, 2)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            #[must_use]
            pub fn rx_ack_timeout_cnt_clear(
                &mut self,
            ) -> RX_ACK_TIMEOUT_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                RX_ACK_TIMEOUT_CNT_CLEAR_W::new(self, 3)
            }
            #[doc = "Bit 4"]
            #[inline(always)]
            #[must_use]
            pub fn rx_ack_abort_coex_cnt_clear(
                &mut self,
            ) -> RX_ACK_ABORT_COEX_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                RX_ACK_ABORT_COEX_CNT_CLEAR_W::new(self, 4)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            #[must_use]
            pub fn ed_scan_coex_cnt_clear(
                &mut self,
            ) -> ED_SCAN_COEX_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                ED_SCAN_COEX_CNT_CLEAR_W::new(self, 5)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            #[must_use]
            pub fn tx_ack_abort_coex_cnt_clear(
                &mut self,
            ) -> TX_ACK_ABORT_COEX_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                TX_ACK_ABORT_COEX_CNT_CLEAR_W::new(self, 6)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            #[must_use]
            pub fn rx_restart_cnt_clear(&mut self) -> RX_RESTART_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                RX_RESTART_CNT_CLEAR_W::new(self, 7)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            #[must_use]
            pub fn rx_abort_coex_cnt_clear(
                &mut self,
            ) -> RX_ABORT_COEX_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                RX_ABORT_COEX_CNT_CLEAR_W::new(self, 8)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            #[must_use]
            pub fn no_rss_detect_cnt_clear(
                &mut self,
            ) -> NO_RSS_DETECT_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                NO_RSS_DETECT_CNT_CLEAR_W::new(self, 9)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            #[must_use]
            pub fn rx_filter_fail_cnt_clear(
                &mut self,
            ) -> RX_FILTER_FAIL_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                RX_FILTER_FAIL_CNT_CLEAR_W::new(self, 10)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            #[must_use]
            pub fn cca_fail_cnt_clear(&mut self) -> CCA_FAIL_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                CCA_FAIL_CNT_CLEAR_W::new(self, 11)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            #[must_use]
            pub fn ed_abort_cnt_clear(&mut self) -> ED_ABORT_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                ED_ABORT_CNT_CLEAR_W::new(self, 12)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            #[must_use]
            pub fn crc_error_cnt_clear(&mut self) -> CRC_ERROR_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                CRC_ERROR_CNT_CLEAR_W::new(self, 13)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            #[must_use]
            pub fn sfd_timeout_cnt_clear(
                &mut self,
            ) -> SFD_TIMEOUT_CNT_CLEAR_W<ERROR_CNT_CLEAR_SPEC> {
                SFD_TIMEOUT_CNT_CLEAR_W::new(self, 14)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`error_cnt_clear::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`error_cnt_clear::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ERROR_CNT_CLEAR_SPEC;
        impl crate::hal::ral::RegisterSpec for ERROR_CNT_CLEAR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`error_cnt_clear::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ERROR_CNT_CLEAR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`error_cnt_clear::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ERROR_CNT_CLEAR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "cca_busy_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cca_busy_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cca_busy_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cca_busy_cnt`] module"]
    pub type CCA_BUSY_CNT = crate::hal::ral::Reg<cca_busy_cnt::CCA_BUSY_CNT_SPEC>;
    #[doc = ""]
    pub mod cca_busy_cnt {
        #[doc = "Register `cca_busy_cnt` reader"]
        pub type R = crate::hal::ral::R<CCA_BUSY_CNT_SPEC>;
        #[doc = "Register `cca_busy_cnt` writer"]
        pub type W = crate::hal::ral::W<CCA_BUSY_CNT_SPEC>;
        #[doc = "Field `cca_busy_cnt` reader - "]
        pub type CCA_BUSY_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `cca_busy_cnt` writer - "]
        pub type CCA_BUSY_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn cca_busy_cnt(&self) -> CCA_BUSY_CNT_R {
                CCA_BUSY_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn cca_busy_cnt(&mut self) -> CCA_BUSY_CNT_W<CCA_BUSY_CNT_SPEC> {
                CCA_BUSY_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cca_busy_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cca_busy_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CCA_BUSY_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for CCA_BUSY_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cca_busy_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CCA_BUSY_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`cca_busy_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CCA_BUSY_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "tx_security_error_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_security_error_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_security_error_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_security_error_cnt`] module"]
    pub type TX_SECURITY_ERROR_CNT =
        crate::hal::ral::Reg<tx_security_error_cnt::TX_SECURITY_ERROR_CNT_SPEC>;
    #[doc = ""]
    pub mod tx_security_error_cnt {
        #[doc = "Register `tx_security_error_cnt` reader"]
        pub type R = crate::hal::ral::R<TX_SECURITY_ERROR_CNT_SPEC>;
        #[doc = "Register `tx_security_error_cnt` writer"]
        pub type W = crate::hal::ral::W<TX_SECURITY_ERROR_CNT_SPEC>;
        #[doc = "Field `tx_security_error_cnt` reader - "]
        pub type TX_SECURITY_ERROR_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `tx_security_error_cnt` writer - "]
        pub type TX_SECURITY_ERROR_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn tx_security_error_cnt(&self) -> TX_SECURITY_ERROR_CNT_R {
                TX_SECURITY_ERROR_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn tx_security_error_cnt(
                &mut self,
            ) -> TX_SECURITY_ERROR_CNT_W<TX_SECURITY_ERROR_CNT_SPEC> {
                TX_SECURITY_ERROR_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_security_error_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_security_error_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TX_SECURITY_ERROR_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for TX_SECURITY_ERROR_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tx_security_error_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TX_SECURITY_ERROR_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`tx_security_error_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TX_SECURITY_ERROR_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "tx_break_coex_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_break_coex_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_break_coex_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_break_coex_cnt`] module"]
    pub type TX_BREAK_COEX_CNT = crate::hal::ral::Reg<tx_break_coex_cnt::TX_BREAK_COEX_CNT_SPEC>;
    #[doc = ""]
    pub mod tx_break_coex_cnt {
        #[doc = "Register `tx_break_coex_cnt` reader"]
        pub type R = crate::hal::ral::R<TX_BREAK_COEX_CNT_SPEC>;
        #[doc = "Register `tx_break_coex_cnt` writer"]
        pub type W = crate::hal::ral::W<TX_BREAK_COEX_CNT_SPEC>;
        #[doc = "Field `tx_break_coex_cnt` reader - "]
        pub type TX_BREAK_COEX_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `tx_break_coex_cnt` writer - "]
        pub type TX_BREAK_COEX_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn tx_break_coex_cnt(&self) -> TX_BREAK_COEX_CNT_R {
                TX_BREAK_COEX_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn tx_break_coex_cnt(&mut self) -> TX_BREAK_COEX_CNT_W<TX_BREAK_COEX_CNT_SPEC> {
                TX_BREAK_COEX_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_break_coex_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_break_coex_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TX_BREAK_COEX_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for TX_BREAK_COEX_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tx_break_coex_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TX_BREAK_COEX_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`tx_break_coex_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TX_BREAK_COEX_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_ack_timeout_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_ack_timeout_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_ack_timeout_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_ack_timeout_cnt`] module"]
    pub type RX_ACK_TIMEOUT_CNT = crate::hal::ral::Reg<rx_ack_timeout_cnt::RX_ACK_TIMEOUT_CNT_SPEC>;
    #[doc = ""]
    pub mod rx_ack_timeout_cnt {
        #[doc = "Register `rx_ack_timeout_cnt` reader"]
        pub type R = crate::hal::ral::R<RX_ACK_TIMEOUT_CNT_SPEC>;
        #[doc = "Register `rx_ack_timeout_cnt` writer"]
        pub type W = crate::hal::ral::W<RX_ACK_TIMEOUT_CNT_SPEC>;
        #[doc = "Field `rx_ack_timeout_cnt` reader - "]
        pub type RX_ACK_TIMEOUT_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `rx_ack_timeout_cnt` writer - "]
        pub type RX_ACK_TIMEOUT_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn rx_ack_timeout_cnt(&self) -> RX_ACK_TIMEOUT_CNT_R {
                RX_ACK_TIMEOUT_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn rx_ack_timeout_cnt(&mut self) -> RX_ACK_TIMEOUT_CNT_W<RX_ACK_TIMEOUT_CNT_SPEC> {
                RX_ACK_TIMEOUT_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_ack_timeout_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_ack_timeout_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_ACK_TIMEOUT_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_ACK_TIMEOUT_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_ack_timeout_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_ACK_TIMEOUT_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_ack_timeout_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_ACK_TIMEOUT_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_ack_abort_coex_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_ack_abort_coex_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_ack_abort_coex_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_ack_abort_coex_cnt`] module"]
    pub type RX_ACK_ABORT_COEX_CNT =
        crate::hal::ral::Reg<rx_ack_abort_coex_cnt::RX_ACK_ABORT_COEX_CNT_SPEC>;
    #[doc = ""]
    pub mod rx_ack_abort_coex_cnt {
        #[doc = "Register `rx_ack_abort_coex_cnt` reader"]
        pub type R = crate::hal::ral::R<RX_ACK_ABORT_COEX_CNT_SPEC>;
        #[doc = "Register `rx_ack_abort_coex_cnt` writer"]
        pub type W = crate::hal::ral::W<RX_ACK_ABORT_COEX_CNT_SPEC>;
        #[doc = "Field `rx_ack_abort_coex_cnt` reader - "]
        pub type RX_ACK_ABORT_COEX_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `rx_ack_abort_coex_cnt` writer - "]
        pub type RX_ACK_ABORT_COEX_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn rx_ack_abort_coex_cnt(&self) -> RX_ACK_ABORT_COEX_CNT_R {
                RX_ACK_ABORT_COEX_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn rx_ack_abort_coex_cnt(
                &mut self,
            ) -> RX_ACK_ABORT_COEX_CNT_W<RX_ACK_ABORT_COEX_CNT_SPEC> {
                RX_ACK_ABORT_COEX_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_ack_abort_coex_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_ack_abort_coex_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_ACK_ABORT_COEX_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_ACK_ABORT_COEX_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_ack_abort_coex_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_ACK_ABORT_COEX_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_ack_abort_coex_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_ACK_ABORT_COEX_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ed_scan_coex_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_scan_coex_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_scan_coex_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ed_scan_coex_cnt`] module"]
    pub type ED_SCAN_COEX_CNT = crate::hal::ral::Reg<ed_scan_coex_cnt::ED_SCAN_COEX_CNT_SPEC>;
    #[doc = ""]
    pub mod ed_scan_coex_cnt {
        #[doc = "Register `ed_scan_coex_cnt` reader"]
        pub type R = crate::hal::ral::R<ED_SCAN_COEX_CNT_SPEC>;
        #[doc = "Register `ed_scan_coex_cnt` writer"]
        pub type W = crate::hal::ral::W<ED_SCAN_COEX_CNT_SPEC>;
        #[doc = "Field `ed_scan_coex_cnt` reader - "]
        pub type ED_SCAN_COEX_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `ed_scan_coex_cnt` writer - "]
        pub type ED_SCAN_COEX_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn ed_scan_coex_cnt(&self) -> ED_SCAN_COEX_CNT_R {
                ED_SCAN_COEX_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn ed_scan_coex_cnt(&mut self) -> ED_SCAN_COEX_CNT_W<ED_SCAN_COEX_CNT_SPEC> {
                ED_SCAN_COEX_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_scan_coex_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_scan_coex_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ED_SCAN_COEX_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for ED_SCAN_COEX_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ed_scan_coex_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ED_SCAN_COEX_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ed_scan_coex_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ED_SCAN_COEX_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "tx_ack_abort_coex_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_ack_abort_coex_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_ack_abort_coex_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_ack_abort_coex_cnt`] module"]
    pub type TX_ACK_ABORT_COEX_CNT =
        crate::hal::ral::Reg<tx_ack_abort_coex_cnt::TX_ACK_ABORT_COEX_CNT_SPEC>;
    #[doc = ""]
    pub mod tx_ack_abort_coex_cnt {
        #[doc = "Register `tx_ack_abort_coex_cnt` reader"]
        pub type R = crate::hal::ral::R<TX_ACK_ABORT_COEX_CNT_SPEC>;
        #[doc = "Register `tx_ack_abort_coex_cnt` writer"]
        pub type W = crate::hal::ral::W<TX_ACK_ABORT_COEX_CNT_SPEC>;
        #[doc = "Field `tx_ack_abort_coex_cnt` reader - "]
        pub type TX_ACK_ABORT_COEX_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `tx_ack_abort_coex_cnt` writer - "]
        pub type TX_ACK_ABORT_COEX_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn tx_ack_abort_coex_cnt(&self) -> TX_ACK_ABORT_COEX_CNT_R {
                TX_ACK_ABORT_COEX_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn tx_ack_abort_coex_cnt(
                &mut self,
            ) -> TX_ACK_ABORT_COEX_CNT_W<TX_ACK_ABORT_COEX_CNT_SPEC> {
                TX_ACK_ABORT_COEX_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_ack_abort_coex_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_ack_abort_coex_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TX_ACK_ABORT_COEX_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for TX_ACK_ABORT_COEX_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tx_ack_abort_coex_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TX_ACK_ABORT_COEX_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`tx_ack_abort_coex_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TX_ACK_ABORT_COEX_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_restart_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_restart_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_restart_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_restart_cnt`] module"]
    pub type RX_RESTART_CNT = crate::hal::ral::Reg<rx_restart_cnt::RX_RESTART_CNT_SPEC>;
    #[doc = ""]
    pub mod rx_restart_cnt {
        #[doc = "Register `rx_restart_cnt` reader"]
        pub type R = crate::hal::ral::R<RX_RESTART_CNT_SPEC>;
        #[doc = "Register `rx_restart_cnt` writer"]
        pub type W = crate::hal::ral::W<RX_RESTART_CNT_SPEC>;
        #[doc = "Field `rx_restart_cnt` reader - "]
        pub type RX_RESTART_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `rx_restart_cnt` writer - "]
        pub type RX_RESTART_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn rx_restart_cnt(&self) -> RX_RESTART_CNT_R {
                RX_RESTART_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn rx_restart_cnt(&mut self) -> RX_RESTART_CNT_W<RX_RESTART_CNT_SPEC> {
                RX_RESTART_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_restart_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_restart_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_RESTART_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_RESTART_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_restart_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_RESTART_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_restart_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_RESTART_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_abort_coex_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_abort_coex_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_abort_coex_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_abort_coex_cnt`] module"]
    pub type RX_ABORT_COEX_CNT = crate::hal::ral::Reg<rx_abort_coex_cnt::RX_ABORT_COEX_CNT_SPEC>;
    #[doc = ""]
    pub mod rx_abort_coex_cnt {
        #[doc = "Register `rx_abort_coex_cnt` reader"]
        pub type R = crate::hal::ral::R<RX_ABORT_COEX_CNT_SPEC>;
        #[doc = "Register `rx_abort_coex_cnt` writer"]
        pub type W = crate::hal::ral::W<RX_ABORT_COEX_CNT_SPEC>;
        #[doc = "Field `rx_abort_coex_cnt` reader - "]
        pub type RX_ABORT_COEX_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `rx_abort_coex_cnt` writer - "]
        pub type RX_ABORT_COEX_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn rx_abort_coex_cnt(&self) -> RX_ABORT_COEX_CNT_R {
                RX_ABORT_COEX_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn rx_abort_coex_cnt(&mut self) -> RX_ABORT_COEX_CNT_W<RX_ABORT_COEX_CNT_SPEC> {
                RX_ABORT_COEX_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_abort_coex_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_abort_coex_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_ABORT_COEX_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_ABORT_COEX_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_abort_coex_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_ABORT_COEX_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_abort_coex_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_ABORT_COEX_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "no_rss_detect_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`no_rss_detect_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`no_rss_detect_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@no_rss_detect_cnt`] module"]
    pub type NO_RSS_DETECT_CNT = crate::hal::ral::Reg<no_rss_detect_cnt::NO_RSS_DETECT_CNT_SPEC>;
    #[doc = ""]
    pub mod no_rss_detect_cnt {
        #[doc = "Register `no_rss_detect_cnt` reader"]
        pub type R = crate::hal::ral::R<NO_RSS_DETECT_CNT_SPEC>;
        #[doc = "Register `no_rss_detect_cnt` writer"]
        pub type W = crate::hal::ral::W<NO_RSS_DETECT_CNT_SPEC>;
        #[doc = "Field `no_rss_detect_cnt` reader - "]
        pub type NO_RSS_DETECT_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `no_rss_detect_cnt` writer - "]
        pub type NO_RSS_DETECT_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn no_rss_detect_cnt(&self) -> NO_RSS_DETECT_CNT_R {
                NO_RSS_DETECT_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn no_rss_detect_cnt(&mut self) -> NO_RSS_DETECT_CNT_W<NO_RSS_DETECT_CNT_SPEC> {
                NO_RSS_DETECT_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`no_rss_detect_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`no_rss_detect_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct NO_RSS_DETECT_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for NO_RSS_DETECT_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`no_rss_detect_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for NO_RSS_DETECT_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`no_rss_detect_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for NO_RSS_DETECT_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_filter_fail_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_filter_fail_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_filter_fail_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_filter_fail_cnt`] module"]
    pub type RX_FILTER_FAIL_CNT = crate::hal::ral::Reg<rx_filter_fail_cnt::RX_FILTER_FAIL_CNT_SPEC>;
    #[doc = ""]
    pub mod rx_filter_fail_cnt {
        #[doc = "Register `rx_filter_fail_cnt` reader"]
        pub type R = crate::hal::ral::R<RX_FILTER_FAIL_CNT_SPEC>;
        #[doc = "Register `rx_filter_fail_cnt` writer"]
        pub type W = crate::hal::ral::W<RX_FILTER_FAIL_CNT_SPEC>;
        #[doc = "Field `rx_filter_fail_cnt` reader - "]
        pub type RX_FILTER_FAIL_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `rx_filter_fail_cnt` writer - "]
        pub type RX_FILTER_FAIL_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn rx_filter_fail_cnt(&self) -> RX_FILTER_FAIL_CNT_R {
                RX_FILTER_FAIL_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn rx_filter_fail_cnt(&mut self) -> RX_FILTER_FAIL_CNT_W<RX_FILTER_FAIL_CNT_SPEC> {
                RX_FILTER_FAIL_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_filter_fail_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_filter_fail_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_FILTER_FAIL_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_FILTER_FAIL_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_filter_fail_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_FILTER_FAIL_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_filter_fail_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_FILTER_FAIL_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "cca_fail_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cca_fail_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cca_fail_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cca_fail_cnt`] module"]
    pub type CCA_FAIL_CNT = crate::hal::ral::Reg<cca_fail_cnt::CCA_FAIL_CNT_SPEC>;
    #[doc = ""]
    pub mod cca_fail_cnt {
        #[doc = "Register `cca_fail_cnt` reader"]
        pub type R = crate::hal::ral::R<CCA_FAIL_CNT_SPEC>;
        #[doc = "Register `cca_fail_cnt` writer"]
        pub type W = crate::hal::ral::W<CCA_FAIL_CNT_SPEC>;
        #[doc = "Field `cca_fail_cnt` reader - "]
        pub type CCA_FAIL_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `cca_fail_cnt` writer - "]
        pub type CCA_FAIL_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn cca_fail_cnt(&self) -> CCA_FAIL_CNT_R {
                CCA_FAIL_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn cca_fail_cnt(&mut self) -> CCA_FAIL_CNT_W<CCA_FAIL_CNT_SPEC> {
                CCA_FAIL_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cca_fail_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cca_fail_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CCA_FAIL_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for CCA_FAIL_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cca_fail_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CCA_FAIL_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`cca_fail_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CCA_FAIL_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ed_abort_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_abort_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_abort_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ed_abort_cnt`] module"]
    pub type ED_ABORT_CNT = crate::hal::ral::Reg<ed_abort_cnt::ED_ABORT_CNT_SPEC>;
    #[doc = ""]
    pub mod ed_abort_cnt {
        #[doc = "Register `ed_abort_cnt` reader"]
        pub type R = crate::hal::ral::R<ED_ABORT_CNT_SPEC>;
        #[doc = "Register `ed_abort_cnt` writer"]
        pub type W = crate::hal::ral::W<ED_ABORT_CNT_SPEC>;
        #[doc = "Field `ed_abort_cnt` reader - "]
        pub type ED_ABORT_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `ed_abort_cnt` writer - "]
        pub type ED_ABORT_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn ed_abort_cnt(&self) -> ED_ABORT_CNT_R {
                ED_ABORT_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn ed_abort_cnt(&mut self) -> ED_ABORT_CNT_W<ED_ABORT_CNT_SPEC> {
                ED_ABORT_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_abort_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_abort_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ED_ABORT_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for ED_ABORT_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ed_abort_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ED_ABORT_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ed_abort_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ED_ABORT_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "crc_error_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`crc_error_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`crc_error_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@crc_error_cnt`] module"]
    pub type CRC_ERROR_CNT = crate::hal::ral::Reg<crc_error_cnt::CRC_ERROR_CNT_SPEC>;
    #[doc = ""]
    pub mod crc_error_cnt {
        #[doc = "Register `crc_error_cnt` reader"]
        pub type R = crate::hal::ral::R<CRC_ERROR_CNT_SPEC>;
        #[doc = "Register `crc_error_cnt` writer"]
        pub type W = crate::hal::ral::W<CRC_ERROR_CNT_SPEC>;
        #[doc = "Field `crc_error_cnt` reader - "]
        pub type CRC_ERROR_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `crc_error_cnt` writer - "]
        pub type CRC_ERROR_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn crc_error_cnt(&self) -> CRC_ERROR_CNT_R {
                CRC_ERROR_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn crc_error_cnt(&mut self) -> CRC_ERROR_CNT_W<CRC_ERROR_CNT_SPEC> {
                CRC_ERROR_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`crc_error_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`crc_error_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CRC_ERROR_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for CRC_ERROR_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`crc_error_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CRC_ERROR_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`crc_error_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CRC_ERROR_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sfd_timeout_cnt (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfd_timeout_cnt::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sfd_timeout_cnt::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sfd_timeout_cnt`] module"]
    pub type SFD_TIMEOUT_CNT = crate::hal::ral::Reg<sfd_timeout_cnt::SFD_TIMEOUT_CNT_SPEC>;
    #[doc = ""]
    pub mod sfd_timeout_cnt {
        #[doc = "Register `sfd_timeout_cnt` reader"]
        pub type R = crate::hal::ral::R<SFD_TIMEOUT_CNT_SPEC>;
        #[doc = "Register `sfd_timeout_cnt` writer"]
        pub type W = crate::hal::ral::W<SFD_TIMEOUT_CNT_SPEC>;
        #[doc = "Field `sfd_timeout_cnt` reader - "]
        pub type SFD_TIMEOUT_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `sfd_timeout_cnt` writer - "]
        pub type SFD_TIMEOUT_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn sfd_timeout_cnt(&self) -> SFD_TIMEOUT_CNT_R {
                SFD_TIMEOUT_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn sfd_timeout_cnt(&mut self) -> SFD_TIMEOUT_CNT_W<SFD_TIMEOUT_CNT_SPEC> {
                SFD_TIMEOUT_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfd_timeout_cnt::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sfd_timeout_cnt::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SFD_TIMEOUT_CNT_SPEC;
        impl crate::hal::ral::RegisterSpec for SFD_TIMEOUT_CNT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sfd_timeout_cnt::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SFD_TIMEOUT_CNT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sfd_timeout_cnt::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SFD_TIMEOUT_CNT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sec_key3 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key3::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key3::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sec_key3`] module"]
    pub type SEC_KEY3 = crate::hal::ral::Reg<sec_key3::SEC_KEY3_SPEC>;
    #[doc = ""]
    pub mod sec_key3 {
        #[doc = "Register `sec_key3` reader"]
        pub type R = crate::hal::ral::R<SEC_KEY3_SPEC>;
        #[doc = "Register `sec_key3` writer"]
        pub type W = crate::hal::ral::W<SEC_KEY3_SPEC>;
        #[doc = "Field `sec_key3` reader - "]
        pub type SEC_KEY3_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `sec_key3` writer - "]
        pub type SEC_KEY3_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn sec_key3(&self) -> SEC_KEY3_R {
                SEC_KEY3_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn sec_key3(&mut self) -> SEC_KEY3_W<SEC_KEY3_SPEC> {
                SEC_KEY3_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key3::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key3::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SEC_KEY3_SPEC;
        impl crate::hal::ral::RegisterSpec for SEC_KEY3_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sec_key3::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SEC_KEY3_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sec_key3::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SEC_KEY3_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sec_key2 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key2::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sec_key2`] module"]
    pub type SEC_KEY2 = crate::hal::ral::Reg<sec_key2::SEC_KEY2_SPEC>;
    #[doc = ""]
    pub mod sec_key2 {
        #[doc = "Register `sec_key2` reader"]
        pub type R = crate::hal::ral::R<SEC_KEY2_SPEC>;
        #[doc = "Register `sec_key2` writer"]
        pub type W = crate::hal::ral::W<SEC_KEY2_SPEC>;
        #[doc = "Field `sec_key2` reader - "]
        pub type SEC_KEY2_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `sec_key2` writer - "]
        pub type SEC_KEY2_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn sec_key2(&self) -> SEC_KEY2_R {
                SEC_KEY2_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn sec_key2(&mut self) -> SEC_KEY2_W<SEC_KEY2_SPEC> {
                SEC_KEY2_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key2::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key2::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SEC_KEY2_SPEC;
        impl crate::hal::ral::RegisterSpec for SEC_KEY2_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sec_key2::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SEC_KEY2_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sec_key2::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SEC_KEY2_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sec_key1 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key1::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sec_key1`] module"]
    pub type SEC_KEY1 = crate::hal::ral::Reg<sec_key1::SEC_KEY1_SPEC>;
    #[doc = ""]
    pub mod sec_key1 {
        #[doc = "Register `sec_key1` reader"]
        pub type R = crate::hal::ral::R<SEC_KEY1_SPEC>;
        #[doc = "Register `sec_key1` writer"]
        pub type W = crate::hal::ral::W<SEC_KEY1_SPEC>;
        #[doc = "Field `sec_key1` reader - "]
        pub type SEC_KEY1_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `sec_key1` writer - "]
        pub type SEC_KEY1_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn sec_key1(&self) -> SEC_KEY1_R {
                SEC_KEY1_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn sec_key1(&mut self) -> SEC_KEY1_W<SEC_KEY1_SPEC> {
                SEC_KEY1_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key1::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SEC_KEY1_SPEC;
        impl crate::hal::ral::RegisterSpec for SEC_KEY1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sec_key1::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SEC_KEY1_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sec_key1::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SEC_KEY1_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sec_key0 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key0::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sec_key0`] module"]
    pub type SEC_KEY0 = crate::hal::ral::Reg<sec_key0::SEC_KEY0_SPEC>;
    #[doc = ""]
    pub mod sec_key0 {
        #[doc = "Register `sec_key0` reader"]
        pub type R = crate::hal::ral::R<SEC_KEY0_SPEC>;
        #[doc = "Register `sec_key0` writer"]
        pub type W = crate::hal::ral::W<SEC_KEY0_SPEC>;
        #[doc = "Field `sec_key0` reader - "]
        pub type SEC_KEY0_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `sec_key0` writer - "]
        pub type SEC_KEY0_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn sec_key0(&self) -> SEC_KEY0_R {
                SEC_KEY0_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn sec_key0(&mut self) -> SEC_KEY0_W<SEC_KEY0_SPEC> {
                SEC_KEY0_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_key0::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_key0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SEC_KEY0_SPEC;
        impl crate::hal::ral::RegisterSpec for SEC_KEY0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sec_key0::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SEC_KEY0_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sec_key0::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SEC_KEY0_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sec_extend_address1 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_extend_address1::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_extend_address1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sec_extend_address1`] module"]
    pub type SEC_EXTEND_ADDRESS1 =
        crate::hal::ral::Reg<sec_extend_address1::SEC_EXTEND_ADDRESS1_SPEC>;
    #[doc = ""]
    pub mod sec_extend_address1 {
        #[doc = "Register `sec_extend_address1` reader"]
        pub type R = crate::hal::ral::R<SEC_EXTEND_ADDRESS1_SPEC>;
        #[doc = "Register `sec_extend_address1` writer"]
        pub type W = crate::hal::ral::W<SEC_EXTEND_ADDRESS1_SPEC>;
        #[doc = "Field `sec_extend_address1` reader - "]
        pub type SEC_EXTEND_ADDRESS1_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `sec_extend_address1` writer - "]
        pub type SEC_EXTEND_ADDRESS1_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn sec_extend_address1(&self) -> SEC_EXTEND_ADDRESS1_R {
                SEC_EXTEND_ADDRESS1_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn sec_extend_address1(
                &mut self,
            ) -> SEC_EXTEND_ADDRESS1_W<SEC_EXTEND_ADDRESS1_SPEC> {
                SEC_EXTEND_ADDRESS1_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_extend_address1::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_extend_address1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SEC_EXTEND_ADDRESS1_SPEC;
        impl crate::hal::ral::RegisterSpec for SEC_EXTEND_ADDRESS1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sec_extend_address1::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SEC_EXTEND_ADDRESS1_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sec_extend_address1::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SEC_EXTEND_ADDRESS1_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sec_extend_address0 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_extend_address0::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_extend_address0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sec_extend_address0`] module"]
    pub type SEC_EXTEND_ADDRESS0 =
        crate::hal::ral::Reg<sec_extend_address0::SEC_EXTEND_ADDRESS0_SPEC>;
    #[doc = ""]
    pub mod sec_extend_address0 {
        #[doc = "Register `sec_extend_address0` reader"]
        pub type R = crate::hal::ral::R<SEC_EXTEND_ADDRESS0_SPEC>;
        #[doc = "Register `sec_extend_address0` writer"]
        pub type W = crate::hal::ral::W<SEC_EXTEND_ADDRESS0_SPEC>;
        #[doc = "Field `sec_extend_address0` reader - "]
        pub type SEC_EXTEND_ADDRESS0_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `sec_extend_address0` writer - "]
        pub type SEC_EXTEND_ADDRESS0_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn sec_extend_address0(&self) -> SEC_EXTEND_ADDRESS0_R {
                SEC_EXTEND_ADDRESS0_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn sec_extend_address0(
                &mut self,
            ) -> SEC_EXTEND_ADDRESS0_W<SEC_EXTEND_ADDRESS0_SPEC> {
                SEC_EXTEND_ADDRESS0_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_extend_address0::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_extend_address0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SEC_EXTEND_ADDRESS0_SPEC;
        impl crate::hal::ral::RegisterSpec for SEC_EXTEND_ADDRESS0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sec_extend_address0::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SEC_EXTEND_ADDRESS0_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sec_extend_address0::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SEC_EXTEND_ADDRESS0_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sec_ctrl (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_ctrl::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_ctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sec_ctrl`] module"]
    pub type SEC_CTRL = crate::hal::ral::Reg<sec_ctrl::SEC_CTRL_SPEC>;
    #[doc = ""]
    pub mod sec_ctrl {
        #[doc = "Register `sec_ctrl` reader"]
        pub type R = crate::hal::ral::R<SEC_CTRL_SPEC>;
        #[doc = "Register `sec_ctrl` writer"]
        pub type W = crate::hal::ral::W<SEC_CTRL_SPEC>;
        #[doc = "Field `sec_en` reader - "]
        pub type SEC_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `sec_en` writer - "]
        pub type SEC_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `sec_payload_offset` reader - "]
        pub type SEC_PAYLOAD_OFFSET_R = crate::hal::ral::FieldReader;
        #[doc = "Field `sec_payload_offset` writer - "]
        pub type SEC_PAYLOAD_OFFSET_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 7>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn sec_en(&self) -> SEC_EN_R {
                SEC_EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bits 8:14"]
            #[inline(always)]
            pub fn sec_payload_offset(&self) -> SEC_PAYLOAD_OFFSET_R {
                SEC_PAYLOAD_OFFSET_R::new(((self.bits >> 8) & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn sec_en(&mut self) -> SEC_EN_W<SEC_CTRL_SPEC> {
                SEC_EN_W::new(self, 0)
            }
            #[doc = "Bits 8:14"]
            #[inline(always)]
            #[must_use]
            pub fn sec_payload_offset(&mut self) -> SEC_PAYLOAD_OFFSET_W<SEC_CTRL_SPEC> {
                SEC_PAYLOAD_OFFSET_W::new(self, 8)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sec_ctrl::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sec_ctrl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SEC_CTRL_SPEC;
        impl crate::hal::ral::RegisterSpec for SEC_CTRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sec_ctrl::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SEC_CTRL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sec_ctrl::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SEC_CTRL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "debug_ctrl (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`debug_ctrl::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`debug_ctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@debug_ctrl`] module"]
    pub type DEBUG_CTRL = crate::hal::ral::Reg<debug_ctrl::DEBUG_CTRL_SPEC>;
    #[doc = ""]
    pub mod debug_ctrl {
        #[doc = "Register `debug_ctrl` reader"]
        pub type R = crate::hal::ral::R<DEBUG_CTRL_SPEC>;
        #[doc = "Register `debug_ctrl` writer"]
        pub type W = crate::hal::ral::W<DEBUG_CTRL_SPEC>;
        #[doc = "Field `debug_signal_sel` reader - "]
        pub type DEBUG_SIGNAL_SEL_R = crate::hal::ral::FieldReader;
        #[doc = "Field `debug_signal_sel` writer - "]
        pub type DEBUG_SIGNAL_SEL_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 3>;
        #[doc = "Field `debug_trigger_state_select` reader - "]
        pub type DEBUG_TRIGGER_STATE_SELECT_R = crate::hal::ral::FieldReader;
        #[doc = "Field `debug_trigger_state_select` writer - "]
        pub type DEBUG_TRIGGER_STATE_SELECT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `debug_ser_debug_sel` reader - "]
        pub type DEBUG_SER_DEBUG_SEL_R = crate::hal::ral::FieldReader;
        #[doc = "Field `debug_ser_debug_sel` writer - "]
        pub type DEBUG_SER_DEBUG_SEL_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `debug_trigger_state_match_value` reader - "]
        pub type DEBUG_TRIGGER_STATE_MATCH_VALUE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `debug_trigger_state_match_value` writer - "]
        pub type DEBUG_TRIGGER_STATE_MATCH_VALUE_W<'a, REG> =
            crate::hal::ral::FieldWriter<'a, REG, 5>;
        #[doc = "Field `debug_trigger_pulse_select` reader - "]
        pub type DEBUG_TRIGGER_PULSE_SELECT_R = crate::hal::ral::FieldReader;
        #[doc = "Field `debug_trigger_pulse_select` writer - "]
        pub type DEBUG_TRIGGER_PULSE_SELECT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 3>;
        #[doc = "Field `debug_state_match_dump_en` reader - "]
        pub type DEBUG_STATE_MATCH_DUMP_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `debug_state_match_dump_en` writer - "]
        pub type DEBUG_STATE_MATCH_DUMP_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `debug_trigger_dump_en` reader - "]
        pub type DEBUG_TRIGGER_DUMP_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `debug_trigger_dump_en` writer - "]
        pub type DEBUG_TRIGGER_DUMP_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            pub fn debug_signal_sel(&self) -> DEBUG_SIGNAL_SEL_R {
                DEBUG_SIGNAL_SEL_R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 8:11"]
            #[inline(always)]
            pub fn debug_trigger_state_select(&self) -> DEBUG_TRIGGER_STATE_SELECT_R {
                DEBUG_TRIGGER_STATE_SELECT_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15"]
            #[inline(always)]
            pub fn debug_ser_debug_sel(&self) -> DEBUG_SER_DEBUG_SEL_R {
                DEBUG_SER_DEBUG_SEL_R::new(((self.bits >> 12) & 0x0f) as u8)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            pub fn debug_trigger_state_match_value(&self) -> DEBUG_TRIGGER_STATE_MATCH_VALUE_R {
                DEBUG_TRIGGER_STATE_MATCH_VALUE_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bits 24:26"]
            #[inline(always)]
            pub fn debug_trigger_pulse_select(&self) -> DEBUG_TRIGGER_PULSE_SELECT_R {
                DEBUG_TRIGGER_PULSE_SELECT_R::new(((self.bits >> 24) & 7) as u8)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn debug_state_match_dump_en(&self) -> DEBUG_STATE_MATCH_DUMP_EN_R {
                DEBUG_STATE_MATCH_DUMP_EN_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn debug_trigger_dump_en(&self) -> DEBUG_TRIGGER_DUMP_EN_R {
                DEBUG_TRIGGER_DUMP_EN_R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            #[must_use]
            pub fn debug_signal_sel(&mut self) -> DEBUG_SIGNAL_SEL_W<DEBUG_CTRL_SPEC> {
                DEBUG_SIGNAL_SEL_W::new(self, 0)
            }
            #[doc = "Bits 8:11"]
            #[inline(always)]
            #[must_use]
            pub fn debug_trigger_state_select(
                &mut self,
            ) -> DEBUG_TRIGGER_STATE_SELECT_W<DEBUG_CTRL_SPEC> {
                DEBUG_TRIGGER_STATE_SELECT_W::new(self, 8)
            }
            #[doc = "Bits 12:15"]
            #[inline(always)]
            #[must_use]
            pub fn debug_ser_debug_sel(&mut self) -> DEBUG_SER_DEBUG_SEL_W<DEBUG_CTRL_SPEC> {
                DEBUG_SER_DEBUG_SEL_W::new(self, 12)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            #[must_use]
            pub fn debug_trigger_state_match_value(
                &mut self,
            ) -> DEBUG_TRIGGER_STATE_MATCH_VALUE_W<DEBUG_CTRL_SPEC> {
                DEBUG_TRIGGER_STATE_MATCH_VALUE_W::new(self, 16)
            }
            #[doc = "Bits 24:26"]
            #[inline(always)]
            #[must_use]
            pub fn debug_trigger_pulse_select(
                &mut self,
            ) -> DEBUG_TRIGGER_PULSE_SELECT_W<DEBUG_CTRL_SPEC> {
                DEBUG_TRIGGER_PULSE_SELECT_W::new(self, 24)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            #[must_use]
            pub fn debug_state_match_dump_en(
                &mut self,
            ) -> DEBUG_STATE_MATCH_DUMP_EN_W<DEBUG_CTRL_SPEC> {
                DEBUG_STATE_MATCH_DUMP_EN_W::new(self, 30)
            }
            #[doc = "Bit 31"]
            #[inline(always)]
            #[must_use]
            pub fn debug_trigger_dump_en(&mut self) -> DEBUG_TRIGGER_DUMP_EN_W<DEBUG_CTRL_SPEC> {
                DEBUG_TRIGGER_DUMP_EN_W::new(self, 31)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`debug_ctrl::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`debug_ctrl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DEBUG_CTRL_SPEC;
        impl crate::hal::ral::RegisterSpec for DEBUG_CTRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`debug_ctrl::R`](R) reader structure"]
        impl crate::hal::ral::Readable for DEBUG_CTRL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`debug_ctrl::W`](W) writer structure"]
        impl crate::hal::ral::Writable for DEBUG_CTRL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "dcdc_ctrl (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dcdc_ctrl::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dcdc_ctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dcdc_ctrl`] module"]
    pub type DCDC_CTRL = crate::hal::ral::Reg<dcdc_ctrl::DCDC_CTRL_SPEC>;
    #[doc = ""]
    pub mod dcdc_ctrl {
        #[doc = "Register `dcdc_ctrl` reader"]
        pub type R = crate::hal::ral::R<DCDC_CTRL_SPEC>;
        #[doc = "Register `dcdc_ctrl` writer"]
        pub type W = crate::hal::ral::W<DCDC_CTRL_SPEC>;
        #[doc = "Field `dcdc_pre_up_delay` reader - "]
        pub type DCDC_PRE_UP_DELAY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `dcdc_pre_up_delay` writer - "]
        pub type DCDC_PRE_UP_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 8>;
        #[doc = "Field `dcdc_down_delay` reader - "]
        pub type DCDC_DOWN_DELAY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `dcdc_down_delay` writer - "]
        pub type DCDC_DOWN_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 8>;
        #[doc = "Field `dcdc_ctrl_en` reader - "]
        pub type DCDC_CTRL_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `dcdc_ctrl_en` writer - "]
        pub type DCDC_CTRL_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `tx_dcdc_up` reader - "]
        pub type TX_DCDC_UP_R = crate::hal::ral::BitReader;
        #[doc = "Field `tx_dcdc_up` writer - "]
        pub type TX_DCDC_UP_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            pub fn dcdc_pre_up_delay(&self) -> DCDC_PRE_UP_DELAY_R {
                DCDC_PRE_UP_DELAY_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15"]
            #[inline(always)]
            pub fn dcdc_down_delay(&self) -> DCDC_DOWN_DELAY_R {
                DCDC_DOWN_DELAY_R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn dcdc_ctrl_en(&self) -> DCDC_CTRL_EN_R {
                DCDC_CTRL_EN_R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn tx_dcdc_up(&self) -> TX_DCDC_UP_R {
                TX_DCDC_UP_R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            #[must_use]
            pub fn dcdc_pre_up_delay(&mut self) -> DCDC_PRE_UP_DELAY_W<DCDC_CTRL_SPEC> {
                DCDC_PRE_UP_DELAY_W::new(self, 0)
            }
            #[doc = "Bits 8:15"]
            #[inline(always)]
            #[must_use]
            pub fn dcdc_down_delay(&mut self) -> DCDC_DOWN_DELAY_W<DCDC_CTRL_SPEC> {
                DCDC_DOWN_DELAY_W::new(self, 8)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            #[must_use]
            pub fn dcdc_ctrl_en(&mut self) -> DCDC_CTRL_EN_W<DCDC_CTRL_SPEC> {
                DCDC_CTRL_EN_W::new(self, 16)
            }
            #[doc = "Bit 31"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dcdc_up(&mut self) -> TX_DCDC_UP_W<DCDC_CTRL_SPEC> {
                TX_DCDC_UP_W::new(self, 31)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dcdc_ctrl::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dcdc_ctrl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DCDC_CTRL_SPEC;
        impl crate::hal::ral::RegisterSpec for DCDC_CTRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dcdc_ctrl::R`](R) reader structure"]
        impl crate::hal::ral::Readable for DCDC_CTRL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`dcdc_ctrl::W`](W) writer structure"]
        impl crate::hal::ral::Writable for DCDC_CTRL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "cont_rx_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cont_rx_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cont_rx_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cont_rx_delay`] module"]
    pub type CONT_RX_DELAY = crate::hal::ral::Reg<cont_rx_delay::CONT_RX_DELAY_SPEC>;
    #[doc = ""]
    pub mod cont_rx_delay {
        #[doc = "Register `cont_rx_delay` reader"]
        pub type R = crate::hal::ral::R<CONT_RX_DELAY_SPEC>;
        #[doc = "Register `cont_rx_delay` writer"]
        pub type W = crate::hal::ral::W<CONT_RX_DELAY_SPEC>;
        #[doc = "Field `cont_rx_delay` reader - "]
        pub type CONT_RX_DELAY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `cont_rx_delay` writer - "]
        pub type CONT_RX_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 6>;
        impl R {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn cont_rx_delay(&self) -> CONT_RX_DELAY_R {
                CONT_RX_DELAY_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            #[must_use]
            pub fn cont_rx_delay(&mut self) -> CONT_RX_DELAY_W<CONT_RX_DELAY_SPEC> {
                CONT_RX_DELAY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cont_rx_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cont_rx_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CONT_RX_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for CONT_RX_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cont_rx_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CONT_RX_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`cont_rx_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CONT_RX_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txrx_switch_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txrx_switch_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txrx_switch_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txrx_switch_delay`] module"]
    pub type TXRX_SWITCH_DELAY = crate::hal::ral::Reg<txrx_switch_delay::TXRX_SWITCH_DELAY_SPEC>;
    #[doc = ""]
    pub mod txrx_switch_delay {
        #[doc = "Register `txrx_switch_delay` reader"]
        pub type R = crate::hal::ral::R<TXRX_SWITCH_DELAY_SPEC>;
        #[doc = "Register `txrx_switch_delay` writer"]
        pub type W = crate::hal::ral::W<TXRX_SWITCH_DELAY_SPEC>;
        #[doc = "Field `txrx_switch_delay` reader - "]
        pub type TXRX_SWITCH_DELAY_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `txrx_switch_delay` writer - "]
        pub type TXRX_SWITCH_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 10, u16>;
        impl R {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            pub fn txrx_switch_delay(&self) -> TXRX_SWITCH_DELAY_R {
                TXRX_SWITCH_DELAY_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            #[must_use]
            pub fn txrx_switch_delay(&mut self) -> TXRX_SWITCH_DELAY_W<TXRX_SWITCH_DELAY_SPEC> {
                TXRX_SWITCH_DELAY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txrx_switch_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txrx_switch_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXRX_SWITCH_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for TXRX_SWITCH_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txrx_switch_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXRX_SWITCH_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txrx_switch_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXRX_SWITCH_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rxon_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxon_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxon_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxon_delay`] module"]
    pub type RXON_DELAY = crate::hal::ral::Reg<rxon_delay::RXON_DELAY_SPEC>;
    #[doc = ""]
    pub mod rxon_delay {
        #[doc = "Register `rxon_delay` reader"]
        pub type R = crate::hal::ral::R<RXON_DELAY_SPEC>;
        #[doc = "Register `rxon_delay` writer"]
        pub type W = crate::hal::ral::W<RXON_DELAY_SPEC>;
        #[doc = "Field `rxon_delay` reader - "]
        pub type RXON_DELAY_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `rxon_delay` writer - "]
        pub type RXON_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 11, u16>;
        impl R {
            #[doc = "Bits 0:10"]
            #[inline(always)]
            pub fn rxon_delay(&self) -> RXON_DELAY_R {
                RXON_DELAY_R::new((self.bits & 0x07ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:10"]
            #[inline(always)]
            #[must_use]
            pub fn rxon_delay(&mut self) -> RXON_DELAY_W<RXON_DELAY_SPEC> {
                RXON_DELAY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxon_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxon_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RXON_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for RXON_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rxon_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RXON_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rxon_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RXON_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txoff_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txoff_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txoff_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txoff_delay`] module"]
    pub type TXOFF_DELAY = crate::hal::ral::Reg<txoff_delay::TXOFF_DELAY_SPEC>;
    #[doc = ""]
    pub mod txoff_delay {
        #[doc = "Register `txoff_delay` reader"]
        pub type R = crate::hal::ral::R<TXOFF_DELAY_SPEC>;
        #[doc = "Register `txoff_delay` writer"]
        pub type W = crate::hal::ral::W<TXOFF_DELAY_SPEC>;
        #[doc = "Field `txoff_delay` reader - "]
        pub type TXOFF_DELAY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txoff_delay` writer - "]
        pub type TXOFF_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 6>;
        impl R {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn txoff_delay(&self) -> TXOFF_DELAY_R {
                TXOFF_DELAY_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            #[must_use]
            pub fn txoff_delay(&mut self) -> TXOFF_DELAY_W<TXOFF_DELAY_SPEC> {
                TXOFF_DELAY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txoff_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txoff_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXOFF_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for TXOFF_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txoff_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXOFF_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txoff_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXOFF_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txen_stop_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txen_stop_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txen_stop_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txen_stop_delay`] module"]
    pub type TXEN_STOP_DELAY = crate::hal::ral::Reg<txen_stop_delay::TXEN_STOP_DELAY_SPEC>;
    #[doc = ""]
    pub mod txen_stop_delay {
        #[doc = "Register `txen_stop_delay` reader"]
        pub type R = crate::hal::ral::R<TXEN_STOP_DELAY_SPEC>;
        #[doc = "Register `txen_stop_delay` writer"]
        pub type W = crate::hal::ral::W<TXEN_STOP_DELAY_SPEC>;
        #[doc = "Field `txen_stop_dly` reader - "]
        pub type TXEN_STOP_DLY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txen_stop_dly` writer - "]
        pub type TXEN_STOP_DLY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 6>;
        impl R {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn txen_stop_dly(&self) -> TXEN_STOP_DLY_R {
                TXEN_STOP_DLY_R::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            #[must_use]
            pub fn txen_stop_dly(&mut self) -> TXEN_STOP_DLY_W<TXEN_STOP_DELAY_SPEC> {
                TXEN_STOP_DLY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txen_stop_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txen_stop_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXEN_STOP_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for TXEN_STOP_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txen_stop_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXEN_STOP_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txen_stop_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXEN_STOP_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txon_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txon_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txon_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txon_delay`] module"]
    pub type TXON_DELAY = crate::hal::ral::Reg<txon_delay::TXON_DELAY_SPEC>;
    #[doc = ""]
    pub mod txon_delay {
        #[doc = "Register `txon_delay` reader"]
        pub type R = crate::hal::ral::R<TXON_DELAY_SPEC>;
        #[doc = "Register `txon_delay` writer"]
        pub type W = crate::hal::ral::W<TXON_DELAY_SPEC>;
        #[doc = "Field `txon_delay` reader - "]
        pub type TXON_DELAY_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `txon_delay` writer - "]
        pub type TXON_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 10, u16>;
        impl R {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            pub fn txon_delay(&self) -> TXON_DELAY_R {
                TXON_DELAY_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            #[must_use]
            pub fn txon_delay(&mut self) -> TXON_DELAY_W<TXON_DELAY_SPEC> {
                TXON_DELAY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txon_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txon_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXON_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for TXON_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txon_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXON_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txon_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXON_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "paon_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`paon_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`paon_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@paon_delay`] module"]
    pub type PAON_DELAY = crate::hal::ral::Reg<paon_delay::PAON_DELAY_SPEC>;
    #[doc = ""]
    pub mod paon_delay {
        #[doc = "Register `paon_delay` reader"]
        pub type R = crate::hal::ral::R<PAON_DELAY_SPEC>;
        #[doc = "Register `paon_delay` writer"]
        pub type W = crate::hal::ral::W<PAON_DELAY_SPEC>;
        #[doc = "Field `paon_delay` reader - "]
        pub type PAON_DELAY_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `paon_delay` writer - "]
        pub type PAON_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 10, u16>;
        impl R {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            pub fn paon_delay(&self) -> PAON_DELAY_R {
                PAON_DELAY_R::new((self.bits & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            #[must_use]
            pub fn paon_delay(&mut self) -> PAON_DELAY_W<PAON_DELAY_SPEC> {
                PAON_DELAY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`paon_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`paon_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PAON_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for PAON_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`paon_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for PAON_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`paon_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for PAON_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "dma_dummy (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dma_dummy::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dma_dummy::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_dummy`] module"]
    pub type DMA_DUMMY = crate::hal::ral::Reg<dma_dummy::DMA_DUMMY_SPEC>;
    #[doc = ""]
    pub mod dma_dummy {
        #[doc = "Register `dma_dummy` reader"]
        pub type R = crate::hal::ral::R<DMA_DUMMY_SPEC>;
        #[doc = "Register `dma_dummy` writer"]
        pub type W = crate::hal::ral::W<DMA_DUMMY_SPEC>;
        #[doc = "Field `dma_dummy_data` reader - "]
        pub type DMA_DUMMY_DATA_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `dma_dummy_data` writer - "]
        pub type DMA_DUMMY_DATA_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn dma_dummy_data(&self) -> DMA_DUMMY_DATA_R {
                DMA_DUMMY_DATA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn dma_dummy_data(&mut self) -> DMA_DUMMY_DATA_W<DMA_DUMMY_SPEC> {
                DMA_DUMMY_DATA_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dma_dummy::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dma_dummy::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DMA_DUMMY_SPEC;
        impl crate::hal::ral::RegisterSpec for DMA_DUMMY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dma_dummy::R`](R) reader structure"]
        impl crate::hal::ral::Readable for DMA_DUMMY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`dma_dummy::W`](W) writer structure"]
        impl crate::hal::ral::Writable for DMA_DUMMY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "dma_gck_cfg (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dma_gck_cfg::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dma_gck_cfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dma_gck_cfg`] module"]
    pub type DMA_GCK_CFG = crate::hal::ral::Reg<dma_gck_cfg::DMA_GCK_CFG_SPEC>;
    #[doc = ""]
    pub mod dma_gck_cfg {
        #[doc = "Register `dma_gck_cfg` reader"]
        pub type R = crate::hal::ral::R<DMA_GCK_CFG_SPEC>;
        #[doc = "Register `dma_gck_cfg` writer"]
        pub type W = crate::hal::ral::W<DMA_GCK_CFG_SPEC>;
        #[doc = "Field `dma_gck_cfg` reader - "]
        pub type DMA_GCK_CFG_R = crate::hal::ral::BitReader;
        #[doc = "Field `dma_gck_cfg` writer - "]
        pub type DMA_GCK_CFG_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn dma_gck_cfg(&self) -> DMA_GCK_CFG_R {
                DMA_GCK_CFG_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn dma_gck_cfg(&mut self) -> DMA_GCK_CFG_W<DMA_GCK_CFG_SPEC> {
                DMA_GCK_CFG_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dma_gck_cfg::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dma_gck_cfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DMA_GCK_CFG_SPEC;
        impl crate::hal::ral::RegisterSpec for DMA_GCK_CFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dma_gck_cfg::R`](R) reader structure"]
        impl crate::hal::ral::Readable for DMA_GCK_CFG_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`dma_gck_cfg::W`](W) writer structure"]
        impl crate::hal::ral::Writable for DMA_GCK_CFG_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rxdma_err (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxdma_err::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxdma_err::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxdma_err`] module"]
    pub type RXDMA_ERR = crate::hal::ral::Reg<rxdma_err::RXDMA_ERR_SPEC>;
    #[doc = ""]
    pub mod rxdma_err {
        #[doc = "Register `rxdma_err` reader"]
        pub type R = crate::hal::ral::R<RXDMA_ERR_SPEC>;
        #[doc = "Register `rxdma_err` writer"]
        pub type W = crate::hal::ral::W<RXDMA_ERR_SPEC>;
        #[doc = "Field `rxdma_err` reader - "]
        pub type RXDMA_ERR_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rxdma_err` writer - "]
        pub type RXDMA_ERR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            pub fn rxdma_err(&self) -> RXDMA_ERR_R {
                RXDMA_ERR_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            #[must_use]
            pub fn rxdma_err(&mut self) -> RXDMA_ERR_W<RXDMA_ERR_SPEC> {
                RXDMA_ERR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxdma_err::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxdma_err::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RXDMA_ERR_SPEC;
        impl crate::hal::ral::RegisterSpec for RXDMA_ERR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rxdma_err::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RXDMA_ERR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rxdma_err::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RXDMA_ERR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rxdma_ctrl_state (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxdma_ctrl_state::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxdma_ctrl_state::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxdma_ctrl_state`] module"]
    pub type RXDMA_CTRL_STATE = crate::hal::ral::Reg<rxdma_ctrl_state::RXDMA_CTRL_STATE_SPEC>;
    #[doc = ""]
    pub mod rxdma_ctrl_state {
        #[doc = "Register `rxdma_ctrl_state` reader"]
        pub type R = crate::hal::ral::R<RXDMA_CTRL_STATE_SPEC>;
        #[doc = "Register `rxdma_ctrl_state` writer"]
        pub type W = crate::hal::ral::W<RXDMA_CTRL_STATE_SPEC>;
        #[doc = "Field `rxdma_water_level` reader - "]
        pub type RXDMA_WATER_LEVEL_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rxdma_water_level` writer - "]
        pub type RXDMA_WATER_LEVEL_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 3>;
        #[doc = "Field `rxdma_state` reader - "]
        pub type RXDMA_STATE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rxdma_state` writer - "]
        pub type RXDMA_STATE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 5>;
        #[doc = "Field `rxdma_append_lqi_offset` reader - "]
        pub type RXDMA_APPEND_LQI_OFFSET_R = crate::hal::ral::BitReader;
        #[doc = "Field `rxdma_append_lqi_offset` writer - "]
        pub type RXDMA_APPEND_LQI_OFFSET_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rxdma_append_freq_offset` reader - "]
        pub type RXDMA_APPEND_FREQ_OFFSET_R = crate::hal::ral::BitReader;
        #[doc = "Field `rxdma_append_freq_offset` writer - "]
        pub type RXDMA_APPEND_FREQ_OFFSET_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            pub fn rxdma_water_level(&self) -> RXDMA_WATER_LEVEL_R {
                RXDMA_WATER_LEVEL_R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            pub fn rxdma_state(&self) -> RXDMA_STATE_R {
                RXDMA_STATE_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn rxdma_append_lqi_offset(&self) -> RXDMA_APPEND_LQI_OFFSET_R {
                RXDMA_APPEND_LQI_OFFSET_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn rxdma_append_freq_offset(&self) -> RXDMA_APPEND_FREQ_OFFSET_R {
                RXDMA_APPEND_FREQ_OFFSET_R::new(((self.bits >> 25) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            #[must_use]
            pub fn rxdma_water_level(&mut self) -> RXDMA_WATER_LEVEL_W<RXDMA_CTRL_STATE_SPEC> {
                RXDMA_WATER_LEVEL_W::new(self, 0)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            #[must_use]
            pub fn rxdma_state(&mut self) -> RXDMA_STATE_W<RXDMA_CTRL_STATE_SPEC> {
                RXDMA_STATE_W::new(self, 16)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            #[must_use]
            pub fn rxdma_append_lqi_offset(
                &mut self,
            ) -> RXDMA_APPEND_LQI_OFFSET_W<RXDMA_CTRL_STATE_SPEC> {
                RXDMA_APPEND_LQI_OFFSET_W::new(self, 24)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            #[must_use]
            pub fn rxdma_append_freq_offset(
                &mut self,
            ) -> RXDMA_APPEND_FREQ_OFFSET_W<RXDMA_CTRL_STATE_SPEC> {
                RXDMA_APPEND_FREQ_OFFSET_W::new(self, 25)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxdma_ctrl_state::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxdma_ctrl_state::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RXDMA_CTRL_STATE_SPEC;
        impl crate::hal::ral::RegisterSpec for RXDMA_CTRL_STATE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rxdma_ctrl_state::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RXDMA_CTRL_STATE_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rxdma_ctrl_state::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RXDMA_CTRL_STATE_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rxdma_addr (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxdma_addr::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxdma_addr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxdma_addr`] module"]
    pub type RXDMA_ADDR = crate::hal::ral::Reg<rxdma_addr::RXDMA_ADDR_SPEC>;
    #[doc = ""]
    pub mod rxdma_addr {
        #[doc = "Register `rxdma_addr` reader"]
        pub type R = crate::hal::ral::R<RXDMA_ADDR_SPEC>;
        #[doc = "Register `rxdma_addr` writer"]
        pub type W = crate::hal::ral::W<RXDMA_ADDR_SPEC>;
        #[doc = "Field `rxdma_addr` reader - "]
        pub type RXDMA_ADDR_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `rxdma_addr` writer - "]
        pub type RXDMA_ADDR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn rxdma_addr(&self) -> RXDMA_ADDR_R {
                RXDMA_ADDR_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn rxdma_addr(&mut self) -> RXDMA_ADDR_W<RXDMA_ADDR_SPEC> {
                RXDMA_ADDR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxdma_addr::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxdma_addr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RXDMA_ADDR_SPEC;
        impl crate::hal::ral::RegisterSpec for RXDMA_ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rxdma_addr::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RXDMA_ADDR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rxdma_addr::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RXDMA_ADDR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txdma_err (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txdma_err::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txdma_err::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdma_err`] module"]
    pub type TXDMA_ERR = crate::hal::ral::Reg<txdma_err::TXDMA_ERR_SPEC>;
    #[doc = ""]
    pub mod txdma_err {
        #[doc = "Register `txdma_err` reader"]
        pub type R = crate::hal::ral::R<TXDMA_ERR_SPEC>;
        #[doc = "Register `txdma_err` writer"]
        pub type W = crate::hal::ral::W<TXDMA_ERR_SPEC>;
        #[doc = "Field `txdma_err` reader - "]
        pub type TXDMA_ERR_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txdma_err` writer - "]
        pub type TXDMA_ERR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            pub fn txdma_err(&self) -> TXDMA_ERR_R {
                TXDMA_ERR_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            #[must_use]
            pub fn txdma_err(&mut self) -> TXDMA_ERR_W<TXDMA_ERR_SPEC> {
                TXDMA_ERR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txdma_err::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txdma_err::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXDMA_ERR_SPEC;
        impl crate::hal::ral::RegisterSpec for TXDMA_ERR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txdma_err::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXDMA_ERR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txdma_err::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXDMA_ERR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txdma_ctrl_state (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txdma_ctrl_state::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txdma_ctrl_state::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdma_ctrl_state`] module"]
    pub type TXDMA_CTRL_STATE = crate::hal::ral::Reg<txdma_ctrl_state::TXDMA_CTRL_STATE_SPEC>;
    #[doc = ""]
    pub mod txdma_ctrl_state {
        #[doc = "Register `txdma_ctrl_state` reader"]
        pub type R = crate::hal::ral::R<TXDMA_CTRL_STATE_SPEC>;
        #[doc = "Register `txdma_ctrl_state` writer"]
        pub type W = crate::hal::ral::W<TXDMA_CTRL_STATE_SPEC>;
        #[doc = "Field `txdma_water_level` reader - "]
        pub type TXDMA_WATER_LEVEL_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txdma_water_level` writer - "]
        pub type TXDMA_WATER_LEVEL_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 3>;
        #[doc = "Field `txdma_fill_entry` reader - "]
        pub type TXDMA_FILL_ENTRY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txdma_fill_entry` writer - "]
        pub type TXDMA_FILL_ENTRY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 3>;
        #[doc = "Field `txdma_state` reader - "]
        pub type TXDMA_STATE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txdma_state` writer - "]
        pub type TXDMA_STATE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 5>;
        #[doc = "Field `txdma_fetch_byte_cnt` reader - "]
        pub type TXDMA_FETCH_BYTE_CNT_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txdma_fetch_byte_cnt` writer - "]
        pub type TXDMA_FETCH_BYTE_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 7>;
        impl R {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            pub fn txdma_water_level(&self) -> TXDMA_WATER_LEVEL_R {
                TXDMA_WATER_LEVEL_R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 4:6"]
            #[inline(always)]
            pub fn txdma_fill_entry(&self) -> TXDMA_FILL_ENTRY_R {
                TXDMA_FILL_ENTRY_R::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            pub fn txdma_state(&self) -> TXDMA_STATE_R {
                TXDMA_STATE_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bits 24:30"]
            #[inline(always)]
            pub fn txdma_fetch_byte_cnt(&self) -> TXDMA_FETCH_BYTE_CNT_R {
                TXDMA_FETCH_BYTE_CNT_R::new(((self.bits >> 24) & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2"]
            #[inline(always)]
            #[must_use]
            pub fn txdma_water_level(&mut self) -> TXDMA_WATER_LEVEL_W<TXDMA_CTRL_STATE_SPEC> {
                TXDMA_WATER_LEVEL_W::new(self, 0)
            }
            #[doc = "Bits 4:6"]
            #[inline(always)]
            #[must_use]
            pub fn txdma_fill_entry(&mut self) -> TXDMA_FILL_ENTRY_W<TXDMA_CTRL_STATE_SPEC> {
                TXDMA_FILL_ENTRY_W::new(self, 4)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            #[must_use]
            pub fn txdma_state(&mut self) -> TXDMA_STATE_W<TXDMA_CTRL_STATE_SPEC> {
                TXDMA_STATE_W::new(self, 16)
            }
            #[doc = "Bits 24:30"]
            #[inline(always)]
            #[must_use]
            pub fn txdma_fetch_byte_cnt(
                &mut self,
            ) -> TXDMA_FETCH_BYTE_CNT_W<TXDMA_CTRL_STATE_SPEC> {
                TXDMA_FETCH_BYTE_CNT_W::new(self, 24)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txdma_ctrl_state::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txdma_ctrl_state::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXDMA_CTRL_STATE_SPEC;
        impl crate::hal::ral::RegisterSpec for TXDMA_CTRL_STATE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txdma_ctrl_state::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXDMA_CTRL_STATE_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txdma_ctrl_state::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXDMA_CTRL_STATE_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txdma_addr (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txdma_addr::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txdma_addr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txdma_addr`] module"]
    pub type TXDMA_ADDR = crate::hal::ral::Reg<txdma_addr::TXDMA_ADDR_SPEC>;
    #[doc = ""]
    pub mod txdma_addr {
        #[doc = "Register `txdma_addr` reader"]
        pub type R = crate::hal::ral::R<TXDMA_ADDR_SPEC>;
        #[doc = "Register `txdma_addr` writer"]
        pub type W = crate::hal::ral::W<TXDMA_ADDR_SPEC>;
        #[doc = "Field `txdma_addr` reader - "]
        pub type TXDMA_ADDR_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `txdma_addr` writer - "]
        pub type TXDMA_ADDR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn txdma_addr(&self) -> TXDMA_ADDR_R {
                TXDMA_ADDR_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn txdma_addr(&mut self) -> TXDMA_ADDR_W<TXDMA_ADDR_SPEC> {
                TXDMA_ADDR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txdma_addr::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txdma_addr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXDMA_ADDR_SPEC;
        impl crate::hal::ral::RegisterSpec for TXDMA_ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txdma_addr::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXDMA_ADDR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txdma_addr::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXDMA_ADDR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "bb_clk (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`bb_clk::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`bb_clk::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bb_clk`] module"]
    pub type BB_CLK = crate::hal::ral::Reg<bb_clk::BB_CLK_SPEC>;
    #[doc = ""]
    pub mod bb_clk {
        #[doc = "Register `bb_clk` reader"]
        pub type R = crate::hal::ral::R<BB_CLK_SPEC>;
        #[doc = "Register `bb_clk` writer"]
        pub type W = crate::hal::ral::W<BB_CLK_SPEC>;
        #[doc = "Field `bb_clk_freq_minus_1` reader - "]
        pub type BB_CLK_FREQ_MINUS_1_R = crate::hal::ral::FieldReader;
        #[doc = "Field `bb_clk_freq_minus_1` writer - "]
        pub type BB_CLK_FREQ_MINUS_1_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4"]
            #[inline(always)]
            pub fn bb_clk_freq_minus_1(&self) -> BB_CLK_FREQ_MINUS_1_R {
                BB_CLK_FREQ_MINUS_1_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4"]
            #[inline(always)]
            #[must_use]
            pub fn bb_clk_freq_minus_1(&mut self) -> BB_CLK_FREQ_MINUS_1_W<BB_CLK_SPEC> {
                BB_CLK_FREQ_MINUS_1_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`bb_clk::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`bb_clk::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BB_CLK_SPEC;
        impl crate::hal::ral::RegisterSpec for BB_CLK_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`bb_clk::R`](R) reader structure"]
        impl crate::hal::ral::Readable for BB_CLK_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`bb_clk::W`](W) writer structure"]
        impl crate::hal::ral::Writable for BB_CLK_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txrx_path_delay (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txrx_path_delay::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txrx_path_delay::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txrx_path_delay`] module"]
    pub type TXRX_PATH_DELAY = crate::hal::ral::Reg<txrx_path_delay::TXRX_PATH_DELAY_SPEC>;
    #[doc = ""]
    pub mod txrx_path_delay {
        #[doc = "Register `txrx_path_delay` reader"]
        pub type R = crate::hal::ral::R<TXRX_PATH_DELAY_SPEC>;
        #[doc = "Register `txrx_path_delay` writer"]
        pub type W = crate::hal::ral::W<TXRX_PATH_DELAY_SPEC>;
        #[doc = "Field `tx_path_delay` reader - "]
        pub type TX_PATH_DELAY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `tx_path_delay` writer - "]
        pub type TX_PATH_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 6>;
        #[doc = "Field `rx_path_delay` reader - "]
        pub type RX_PATH_DELAY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rx_path_delay` writer - "]
        pub type RX_PATH_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 6>;
        impl R {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            pub fn tx_path_delay(&self) -> TX_PATH_DELAY_R {
                TX_PATH_DELAY_R::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bits 16:21"]
            #[inline(always)]
            pub fn rx_path_delay(&self) -> RX_PATH_DELAY_R {
                RX_PATH_DELAY_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5"]
            #[inline(always)]
            #[must_use]
            pub fn tx_path_delay(&mut self) -> TX_PATH_DELAY_W<TXRX_PATH_DELAY_SPEC> {
                TX_PATH_DELAY_W::new(self, 0)
            }
            #[doc = "Bits 16:21"]
            #[inline(always)]
            #[must_use]
            pub fn rx_path_delay(&mut self) -> RX_PATH_DELAY_W<TXRX_PATH_DELAY_SPEC> {
                RX_PATH_DELAY_W::new(self, 16)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txrx_path_delay::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txrx_path_delay::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXRX_PATH_DELAY_SPEC;
        impl crate::hal::ral::RegisterSpec for TXRX_PATH_DELAY_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txrx_path_delay::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXRX_PATH_DELAY_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txrx_path_delay::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXRX_PATH_DELAY_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "sfd_wait_symbol (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfd_wait_symbol::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sfd_wait_symbol::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sfd_wait_symbol`] module"]
    pub type SFD_WAIT_SYMBOL = crate::hal::ral::Reg<sfd_wait_symbol::SFD_WAIT_SYMBOL_SPEC>;
    #[doc = ""]
    pub mod sfd_wait_symbol {
        #[doc = "Register `sfd_wait_symbol` reader"]
        pub type R = crate::hal::ral::R<SFD_WAIT_SYMBOL_SPEC>;
        #[doc = "Register `sfd_wait_symbol` writer"]
        pub type W = crate::hal::ral::W<SFD_WAIT_SYMBOL_SPEC>;
        #[doc = "Field `sfd_wait_symbol_num` reader - "]
        pub type SFD_WAIT_SYMBOL_NUM_R = crate::hal::ral::FieldReader;
        #[doc = "Field `sfd_wait_symbol_num` writer - "]
        pub type SFD_WAIT_SYMBOL_NUM_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            pub fn sfd_wait_symbol_num(&self) -> SFD_WAIT_SYMBOL_NUM_R {
                SFD_WAIT_SYMBOL_NUM_R::new((self.bits & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            #[must_use]
            pub fn sfd_wait_symbol_num(&mut self) -> SFD_WAIT_SYMBOL_NUM_W<SFD_WAIT_SYMBOL_SPEC> {
                SFD_WAIT_SYMBOL_NUM_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sfd_wait_symbol::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sfd_wait_symbol::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SFD_WAIT_SYMBOL_SPEC;
        impl crate::hal::ral::RegisterSpec for SFD_WAIT_SYMBOL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sfd_wait_symbol::R`](R) reader structure"]
        impl crate::hal::ral::Readable for SFD_WAIT_SYMBOL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`sfd_wait_symbol::W`](W) writer structure"]
        impl crate::hal::ral::Writable for SFD_WAIT_SYMBOL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ifs_counter (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ifs_counter::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ifs_counter::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ifs_counter`] module"]
    pub type IFS_COUNTER = crate::hal::ral::Reg<ifs_counter::IFS_COUNTER_SPEC>;
    #[doc = ""]
    pub mod ifs_counter {
        #[doc = "Register `ifs_counter` reader"]
        pub type R = crate::hal::ral::R<IFS_COUNTER_SPEC>;
        #[doc = "Register `ifs_counter` writer"]
        pub type W = crate::hal::ral::W<IFS_COUNTER_SPEC>;
        #[doc = "Field `ifs_counter` reader - "]
        pub type IFS_COUNTER_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `ifs_counter` writer - "]
        pub type IFS_COUNTER_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 10, u16>;
        #[doc = "Field `ifs_counter_en` reader - "]
        pub type IFS_COUNTER_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `ifs_counter_en` writer - "]
        pub type IFS_COUNTER_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            pub fn ifs_counter(&self) -> IFS_COUNTER_R {
                IFS_COUNTER_R::new((self.bits & 0x03ff) as u16)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            pub fn ifs_counter_en(&self) -> IFS_COUNTER_EN_R {
                IFS_COUNTER_EN_R::new(((self.bits >> 16) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:9"]
            #[inline(always)]
            #[must_use]
            pub fn ifs_counter(&mut self) -> IFS_COUNTER_W<IFS_COUNTER_SPEC> {
                IFS_COUNTER_W::new(self, 0)
            }
            #[doc = "Bit 16"]
            #[inline(always)]
            #[must_use]
            pub fn ifs_counter_en(&mut self) -> IFS_COUNTER_EN_W<IFS_COUNTER_SPEC> {
                IFS_COUNTER_EN_W::new(self, 16)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ifs_counter::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ifs_counter::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IFS_COUNTER_SPEC;
        impl crate::hal::ral::RegisterSpec for IFS_COUNTER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ifs_counter::R`](R) reader structure"]
        impl crate::hal::ral::Readable for IFS_COUNTER_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ifs_counter::W`](W) writer structure"]
        impl crate::hal::ral::Writable for IFS_COUNTER_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "clk_counter (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clk_counter::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clk_counter::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clk_counter`] module"]
    pub type CLK_COUNTER = crate::hal::ral::Reg<clk_counter::CLK_COUNTER_SPEC>;
    #[doc = ""]
    pub mod clk_counter {
        #[doc = "Register `clk_counter` reader"]
        pub type R = crate::hal::ral::R<CLK_COUNTER_SPEC>;
        #[doc = "Register `clk_counter` writer"]
        pub type W = crate::hal::ral::W<CLK_COUNTER_SPEC>;
        #[doc = "Field `clk_625us_cnt` reader - "]
        pub type CLK_625US_CNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `clk_625us_cnt` writer - "]
        pub type CLK_625US_CNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn clk_625us_cnt(&self) -> CLK_625US_CNT_R {
                CLK_625US_CNT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn clk_625us_cnt(&mut self) -> CLK_625US_CNT_W<CLK_COUNTER_SPEC> {
                CLK_625US_CNT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clk_counter::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clk_counter::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CLK_COUNTER_SPEC;
        impl crate::hal::ral::RegisterSpec for CLK_COUNTER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`clk_counter::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CLK_COUNTER_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`clk_counter::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CLK_COUNTER_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "clk_counter_match_val (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clk_counter_match_val::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clk_counter_match_val::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clk_counter_match_val`] module"]
    pub type CLK_COUNTER_MATCH_VAL =
        crate::hal::ral::Reg<clk_counter_match_val::CLK_COUNTER_MATCH_VAL_SPEC>;
    #[doc = ""]
    pub mod clk_counter_match_val {
        #[doc = "Register `clk_counter_match_val` reader"]
        pub type R = crate::hal::ral::R<CLK_COUNTER_MATCH_VAL_SPEC>;
        #[doc = "Register `clk_counter_match_val` writer"]
        pub type W = crate::hal::ral::W<CLK_COUNTER_MATCH_VAL_SPEC>;
        #[doc = "Field `clk_count_match_val` reader - "]
        pub type CLK_COUNT_MATCH_VAL_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `clk_count_match_val` writer - "]
        pub type CLK_COUNT_MATCH_VAL_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn clk_count_match_val(&self) -> CLK_COUNT_MATCH_VAL_R {
                CLK_COUNT_MATCH_VAL_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn clk_count_match_val(
                &mut self,
            ) -> CLK_COUNT_MATCH_VAL_W<CLK_COUNTER_MATCH_VAL_SPEC> {
                CLK_COUNT_MATCH_VAL_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clk_counter_match_val::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clk_counter_match_val::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CLK_COUNTER_MATCH_VAL_SPEC;
        impl crate::hal::ral::RegisterSpec for CLK_COUNTER_MATCH_VAL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`clk_counter_match_val::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CLK_COUNTER_MATCH_VAL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`clk_counter_match_val::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CLK_COUNTER_MATCH_VAL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "time1_value (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time1_value::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time1_value::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@time1_value`] module"]
    pub type TIME1_VALUE = crate::hal::ral::Reg<time1_value::TIME1_VALUE_SPEC>;
    #[doc = ""]
    pub mod time1_value {
        #[doc = "Register `time1_value` reader"]
        pub type R = crate::hal::ral::R<TIME1_VALUE_SPEC>;
        #[doc = "Register `time1_value` writer"]
        pub type W = crate::hal::ral::W<TIME1_VALUE_SPEC>;
        #[doc = "Field `timer1_value` reader - "]
        pub type TIMER1_VALUE_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `timer1_value` writer - "]
        pub type TIMER1_VALUE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn timer1_value(&self) -> TIMER1_VALUE_R {
                TIMER1_VALUE_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn timer1_value(&mut self) -> TIMER1_VALUE_W<TIME1_VALUE_SPEC> {
                TIMER1_VALUE_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time1_value::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time1_value::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TIME1_VALUE_SPEC;
        impl crate::hal::ral::RegisterSpec for TIME1_VALUE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`time1_value::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TIME1_VALUE_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`time1_value::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TIME1_VALUE_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "time1_threshold (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time1_threshold::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time1_threshold::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@time1_threshold`] module"]
    pub type TIME1_THRESHOLD = crate::hal::ral::Reg<time1_threshold::TIME1_THRESHOLD_SPEC>;
    #[doc = ""]
    pub mod time1_threshold {
        #[doc = "Register `time1_threshold` reader"]
        pub type R = crate::hal::ral::R<TIME1_THRESHOLD_SPEC>;
        #[doc = "Register `time1_threshold` writer"]
        pub type W = crate::hal::ral::W<TIME1_THRESHOLD_SPEC>;
        #[doc = "Field `timer1_threshold` reader - "]
        pub type TIMER1_THRESHOLD_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `timer1_threshold` writer - "]
        pub type TIMER1_THRESHOLD_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn timer1_threshold(&self) -> TIMER1_THRESHOLD_R {
                TIMER1_THRESHOLD_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn timer1_threshold(&mut self) -> TIMER1_THRESHOLD_W<TIME1_THRESHOLD_SPEC> {
                TIMER1_THRESHOLD_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time1_threshold::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time1_threshold::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TIME1_THRESHOLD_SPEC;
        impl crate::hal::ral::RegisterSpec for TIME1_THRESHOLD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`time1_threshold::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TIME1_THRESHOLD_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`time1_threshold::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TIME1_THRESHOLD_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "time0_value (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time0_value::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time0_value::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@time0_value`] module"]
    pub type TIME0_VALUE = crate::hal::ral::Reg<time0_value::TIME0_VALUE_SPEC>;
    #[doc = ""]
    pub mod time0_value {
        #[doc = "Register `time0_value` reader"]
        pub type R = crate::hal::ral::R<TIME0_VALUE_SPEC>;
        #[doc = "Register `time0_value` writer"]
        pub type W = crate::hal::ral::W<TIME0_VALUE_SPEC>;
        #[doc = "Field `timer0_value` reader - "]
        pub type TIMER0_VALUE_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `timer0_value` writer - "]
        pub type TIMER0_VALUE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn timer0_value(&self) -> TIMER0_VALUE_R {
                TIMER0_VALUE_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn timer0_value(&mut self) -> TIMER0_VALUE_W<TIME0_VALUE_SPEC> {
                TIMER0_VALUE_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time0_value::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time0_value::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TIME0_VALUE_SPEC;
        impl crate::hal::ral::RegisterSpec for TIME0_VALUE_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`time0_value::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TIME0_VALUE_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`time0_value::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TIME0_VALUE_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "time0_threshold (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time0_threshold::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time0_threshold::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@time0_threshold`] module"]
    pub type TIME0_THRESHOLD = crate::hal::ral::Reg<time0_threshold::TIME0_THRESHOLD_SPEC>;
    #[doc = ""]
    pub mod time0_threshold {
        #[doc = "Register `time0_threshold` reader"]
        pub type R = crate::hal::ral::R<TIME0_THRESHOLD_SPEC>;
        #[doc = "Register `time0_threshold` writer"]
        pub type W = crate::hal::ral::W<TIME0_THRESHOLD_SPEC>;
        #[doc = "Field `timer0_threshold` reader - "]
        pub type TIMER0_THRESHOLD_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `timer0_threshold` writer - "]
        pub type TIMER0_THRESHOLD_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn timer0_threshold(&self) -> TIMER0_THRESHOLD_R {
                TIMER0_THRESHOLD_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn timer0_threshold(&mut self) -> TIMER0_THRESHOLD_W<TIME0_THRESHOLD_SPEC> {
                TIMER0_THRESHOLD_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`time0_threshold::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`time0_threshold::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TIME0_THRESHOLD_SPEC;
        impl crate::hal::ral::RegisterSpec for TIME0_THRESHOLD_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`time0_threshold::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TIME0_THRESHOLD_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`time0_threshold::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TIME0_THRESHOLD_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_length (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_length::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_length::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_length`] module"]
    pub type RX_LENGTH = crate::hal::ral::Reg<rx_length::RX_LENGTH_SPEC>;
    #[doc = ""]
    pub mod rx_length {
        #[doc = "Register `rx_length` reader"]
        pub type R = crate::hal::ral::R<RX_LENGTH_SPEC>;
        #[doc = "Register `rx_length` writer"]
        pub type W = crate::hal::ral::W<RX_LENGTH_SPEC>;
        #[doc = "Field `rx_length` reader - "]
        pub type RX_LENGTH_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rx_length` writer - "]
        pub type RX_LENGTH_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 7>;
        impl R {
            #[doc = "Bits 0:6"]
            #[inline(always)]
            pub fn rx_length(&self) -> RX_LENGTH_R {
                RX_LENGTH_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6"]
            #[inline(always)]
            #[must_use]
            pub fn rx_length(&mut self) -> RX_LENGTH_W<RX_LENGTH_SPEC> {
                RX_LENGTH_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_length::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_length::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_LENGTH_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_LENGTH_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_length::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_LENGTH_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_length::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_LENGTH_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "dtm_pkt_counter (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dtm_pkt_counter::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dtm_pkt_counter::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dtm_pkt_counter`] module"]
    pub type DTM_PKT_COUNTER = crate::hal::ral::Reg<dtm_pkt_counter::DTM_PKT_COUNTER_SPEC>;
    #[doc = ""]
    pub mod dtm_pkt_counter {
        #[doc = "Register `dtm_pkt_counter` reader"]
        pub type R = crate::hal::ral::R<DTM_PKT_COUNTER_SPEC>;
        #[doc = "Register `dtm_pkt_counter` writer"]
        pub type W = crate::hal::ral::W<DTM_PKT_COUNTER_SPEC>;
        #[doc = "Field `dtm_txrx_pkt_count` reader - "]
        pub type DTM_TXRX_PKT_COUNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `dtm_txrx_pkt_count` writer - "]
        pub type DTM_TXRX_PKT_COUNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        #[doc = "Field `dtm_crc_err_pkt_count` reader - "]
        pub type DTM_CRC_ERR_PKT_COUNT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `dtm_crc_err_pkt_count` writer - "]
        pub type DTM_CRC_ERR_PKT_COUNT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn dtm_txrx_pkt_count(&self) -> DTM_TXRX_PKT_COUNT_R {
                DTM_TXRX_PKT_COUNT_R::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31"]
            #[inline(always)]
            pub fn dtm_crc_err_pkt_count(&self) -> DTM_CRC_ERR_PKT_COUNT_R {
                DTM_CRC_ERR_PKT_COUNT_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn dtm_txrx_pkt_count(&mut self) -> DTM_TXRX_PKT_COUNT_W<DTM_PKT_COUNTER_SPEC> {
                DTM_TXRX_PKT_COUNT_W::new(self, 0)
            }
            #[doc = "Bits 16:31"]
            #[inline(always)]
            #[must_use]
            pub fn dtm_crc_err_pkt_count(
                &mut self,
            ) -> DTM_CRC_ERR_PKT_COUNT_W<DTM_PKT_COUNTER_SPEC> {
                DTM_CRC_ERR_PKT_COUNT_W::new(self, 16)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dtm_pkt_counter::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dtm_pkt_counter::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DTM_PKT_COUNTER_SPEC;
        impl crate::hal::ral::RegisterSpec for DTM_PKT_COUNTER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dtm_pkt_counter::R`](R) reader structure"]
        impl crate::hal::ral::Readable for DTM_PKT_COUNTER_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`dtm_pkt_counter::W`](W) writer structure"]
        impl crate::hal::ral::Writable for DTM_PKT_COUNTER_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "dtm_tx_pkt_config (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dtm_tx_pkt_config::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dtm_tx_pkt_config::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dtm_tx_pkt_config`] module"]
    pub type DTM_TX_PKT_CONFIG = crate::hal::ral::Reg<dtm_tx_pkt_config::DTM_TX_PKT_CONFIG_SPEC>;
    #[doc = ""]
    pub mod dtm_tx_pkt_config {
        #[doc = "Register `dtm_tx_pkt_config` reader"]
        pub type R = crate::hal::ral::R<DTM_TX_PKT_CONFIG_SPEC>;
        #[doc = "Register `dtm_tx_pkt_config` writer"]
        pub type W = crate::hal::ral::W<DTM_TX_PKT_CONFIG_SPEC>;
        #[doc = "Field `dtm_tx_pkt_threshold` reader - "]
        pub type DTM_TX_PKT_THRESHOLD_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `dtm_tx_pkt_threshold` writer - "]
        pub type DTM_TX_PKT_THRESHOLD_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn dtm_tx_pkt_threshold(&self) -> DTM_TX_PKT_THRESHOLD_R {
                DTM_TX_PKT_THRESHOLD_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn dtm_tx_pkt_threshold(
                &mut self,
            ) -> DTM_TX_PKT_THRESHOLD_W<DTM_TX_PKT_CONFIG_SPEC> {
                DTM_TX_PKT_THRESHOLD_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dtm_tx_pkt_config::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dtm_tx_pkt_config::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DTM_TX_PKT_CONFIG_SPEC;
        impl crate::hal::ral::RegisterSpec for DTM_TX_PKT_CONFIG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dtm_tx_pkt_config::R`](R) reader structure"]
        impl crate::hal::ral::Readable for DTM_TX_PKT_CONFIG_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`dtm_tx_pkt_config::W`](W) writer structure"]
        impl crate::hal::ral::Writable for DTM_TX_PKT_CONFIG_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "dtm_config (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dtm_config::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dtm_config::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dtm_config`] module"]
    pub type DTM_CONFIG = crate::hal::ral::Reg<dtm_config::DTM_CONFIG_SPEC>;
    #[doc = ""]
    pub mod dtm_config {
        #[doc = "Register `dtm_config` reader"]
        pub type R = crate::hal::ral::R<DTM_CONFIG_SPEC>;
        #[doc = "Register `dtm_config` writer"]
        pub type W = crate::hal::ral::W<DTM_CONFIG_SPEC>;
        #[doc = "Field `dtmch_tx_length` reader - "]
        pub type DTMCH_TX_LENGTH_R = crate::hal::ral::FieldReader;
        #[doc = "Field `dtmch_tx_length` writer - "]
        pub type DTMCH_TX_LENGTH_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 8>;
        #[doc = "Field `dtm_tx_pld_type` reader - "]
        pub type DTM_TX_PLD_TYPE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `dtm_tx_pld_type` writer - "]
        pub type DTM_TX_PLD_TYPE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `dtm_hop_freq` reader - "]
        pub type DTM_HOP_FREQ_R = crate::hal::ral::FieldReader;
        #[doc = "Field `dtm_hop_freq` writer - "]
        pub type DTM_HOP_FREQ_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 6>;
        #[doc = "Field `dtm_contrx_en` reader - "]
        pub type DTM_CONTRX_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `dtm_contrx_en` writer - "]
        pub type DTM_CONTRX_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `dtm_on` reader - "]
        pub type DTM_ON_R = crate::hal::ral::BitReader;
        #[doc = "Field `dtm_on` writer - "]
        pub type DTM_ON_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            pub fn dtmch_tx_length(&self) -> DTMCH_TX_LENGTH_R {
                DTMCH_TX_LENGTH_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:11"]
            #[inline(always)]
            pub fn dtm_tx_pld_type(&self) -> DTM_TX_PLD_TYPE_R {
                DTM_TX_PLD_TYPE_R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 16:21"]
            #[inline(always)]
            pub fn dtm_hop_freq(&self) -> DTM_HOP_FREQ_R {
                DTM_HOP_FREQ_R::new(((self.bits >> 16) & 0x3f) as u8)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn dtm_contrx_en(&self) -> DTM_CONTRX_EN_R {
                DTM_CONTRX_EN_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn dtm_on(&self) -> DTM_ON_R {
                DTM_ON_R::new(((self.bits >> 25) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            #[must_use]
            pub fn dtmch_tx_length(&mut self) -> DTMCH_TX_LENGTH_W<DTM_CONFIG_SPEC> {
                DTMCH_TX_LENGTH_W::new(self, 0)
            }
            #[doc = "Bits 8:11"]
            #[inline(always)]
            #[must_use]
            pub fn dtm_tx_pld_type(&mut self) -> DTM_TX_PLD_TYPE_W<DTM_CONFIG_SPEC> {
                DTM_TX_PLD_TYPE_W::new(self, 8)
            }
            #[doc = "Bits 16:21"]
            #[inline(always)]
            #[must_use]
            pub fn dtm_hop_freq(&mut self) -> DTM_HOP_FREQ_W<DTM_CONFIG_SPEC> {
                DTM_HOP_FREQ_W::new(self, 16)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            #[must_use]
            pub fn dtm_contrx_en(&mut self) -> DTM_CONTRX_EN_W<DTM_CONFIG_SPEC> {
                DTM_CONTRX_EN_W::new(self, 24)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            #[must_use]
            pub fn dtm_on(&mut self) -> DTM_ON_W<DTM_CONFIG_SPEC> {
                DTM_ON_W::new(self, 25)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dtm_config::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dtm_config::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DTM_CONFIG_SPEC;
        impl crate::hal::ral::RegisterSpec for DTM_CONFIG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dtm_config::R`](R) reader structure"]
        impl crate::hal::ral::Readable for DTM_CONFIG_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`dtm_config::W`](W) writer structure"]
        impl crate::hal::ral::Writable for DTM_CONFIG_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "test_control (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`test_control::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`test_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@test_control`] module"]
    pub type TEST_CONTROL = crate::hal::ral::Reg<test_control::TEST_CONTROL_SPEC>;
    #[doc = ""]
    pub mod test_control {
        #[doc = "Register `test_control` reader"]
        pub type R = crate::hal::ral::R<TEST_CONTROL_SPEC>;
        #[doc = "Register `test_control` writer"]
        pub type W = crate::hal::ral::W<TEST_CONTROL_SPEC>;
        #[doc = "Field `wrong_crc` reader - "]
        pub type WRONG_CRC_R = crate::hal::ral::BitReader;
        #[doc = "Field `wrong_crc` writer - "]
        pub type WRONG_CRC_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn wrong_crc(&self) -> WRONG_CRC_R {
                WRONG_CRC_R::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn wrong_crc(&mut self) -> WRONG_CRC_W<TEST_CONTROL_SPEC> {
                WRONG_CRC_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`test_control::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`test_control::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TEST_CONTROL_SPEC;
        impl crate::hal::ral::RegisterSpec for TEST_CONTROL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`test_control::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TEST_CONTROL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`test_control::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TEST_CONTROL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "core_gck_cfg (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`core_gck_cfg::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`core_gck_cfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@core_gck_cfg`] module"]
    pub type CORE_GCK_CFG = crate::hal::ral::Reg<core_gck_cfg::CORE_GCK_CFG_SPEC>;
    #[doc = ""]
    pub mod core_gck_cfg {
        #[doc = "Register `core_gck_cfg` reader"]
        pub type R = crate::hal::ral::R<CORE_GCK_CFG_SPEC>;
        #[doc = "Register `core_gck_cfg` writer"]
        pub type W = crate::hal::ral::W<CORE_GCK_CFG_SPEC>;
        #[doc = "Field `dis_pkt_gck` reader - "]
        pub type DIS_PKT_GCK_R = crate::hal::ral::BitReader;
        #[doc = "Field `dis_pkt_gck` writer - "]
        pub type DIS_PKT_GCK_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `dis_ctrl_gck` reader - "]
        pub type DIS_CTRL_GCK_R = crate::hal::ral::BitReader;
        #[doc = "Field `dis_ctrl_gck` writer - "]
        pub type DIS_CTRL_GCK_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn dis_pkt_gck(&self) -> DIS_PKT_GCK_R {
                DIS_PKT_GCK_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn dis_ctrl_gck(&self) -> DIS_CTRL_GCK_R {
                DIS_CTRL_GCK_R::new(((self.bits >> 1) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn dis_pkt_gck(&mut self) -> DIS_PKT_GCK_W<CORE_GCK_CFG_SPEC> {
                DIS_PKT_GCK_W::new(self, 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            #[must_use]
            pub fn dis_ctrl_gck(&mut self) -> DIS_CTRL_GCK_W<CORE_GCK_CFG_SPEC> {
                DIS_CTRL_GCK_W::new(self, 1)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`core_gck_cfg::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`core_gck_cfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CORE_GCK_CFG_SPEC;
        impl crate::hal::ral::RegisterSpec for CORE_GCK_CFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`core_gck_cfg::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CORE_GCK_CFG_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`core_gck_cfg::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CORE_GCK_CFG_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "tx_ccm_schedule_status (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_ccm_schedule_status::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_ccm_schedule_status::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_ccm_schedule_status`] module"]
    pub type TX_CCM_SCHEDULE_STATUS =
        crate::hal::ral::Reg<tx_ccm_schedule_status::TX_CCM_SCHEDULE_STATUS_SPEC>;
    #[doc = ""]
    pub mod tx_ccm_schedule_status {
        #[doc = "Register `tx_ccm_schedule_status` reader"]
        pub type R = crate::hal::ral::R<TX_CCM_SCHEDULE_STATUS_SPEC>;
        #[doc = "Register `tx_ccm_schedule_status` writer"]
        pub type W = crate::hal::ral::W<TX_CCM_SCHEDULE_STATUS_SPEC>;
        #[doc = "Field `tx_ccm_schedule_status` reader - "]
        pub type TX_CCM_SCHEDULE_STATUS_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `tx_ccm_schedule_status` writer - "]
        pub type TX_CCM_SCHEDULE_STATUS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 31, u32>;
        impl R {
            #[doc = "Bits 0:30"]
            #[inline(always)]
            pub fn tx_ccm_schedule_status(&self) -> TX_CCM_SCHEDULE_STATUS_R {
                TX_CCM_SCHEDULE_STATUS_R::new(self.bits & 0x7fff_ffff)
            }
        }
        impl W {
            #[doc = "Bits 0:30"]
            #[inline(always)]
            #[must_use]
            pub fn tx_ccm_schedule_status(
                &mut self,
            ) -> TX_CCM_SCHEDULE_STATUS_W<TX_CCM_SCHEDULE_STATUS_SPEC> {
                TX_CCM_SCHEDULE_STATUS_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_ccm_schedule_status::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_ccm_schedule_status::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TX_CCM_SCHEDULE_STATUS_SPEC;
        impl crate::hal::ral::RegisterSpec for TX_CCM_SCHEDULE_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tx_ccm_schedule_status::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TX_CCM_SCHEDULE_STATUS_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`tx_ccm_schedule_status::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TX_CCM_SCHEDULE_STATUS_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "txrx_status (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txrx_status::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txrx_status::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txrx_status`] module"]
    pub type TXRX_STATUS = crate::hal::ral::Reg<txrx_status::TXRX_STATUS_SPEC>;
    #[doc = ""]
    pub mod txrx_status {
        #[doc = "Register `txrx_status` reader"]
        pub type R = crate::hal::ral::R<TXRX_STATUS_SPEC>;
        #[doc = "Register `txrx_status` writer"]
        pub type W = crate::hal::ral::W<TXRX_STATUS_SPEC>;
        #[doc = "Field `txrx_state` reader - "]
        pub type TXRX_STATE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `txrx_state` writer - "]
        pub type TXRX_STATE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `tx_proc` reader - "]
        pub type TX_PROC_R = crate::hal::ral::BitReader;
        #[doc = "Field `tx_proc` writer - "]
        pub type TX_PROC_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rx_proc` reader - "]
        pub type RX_PROC_R = crate::hal::ral::BitReader;
        #[doc = "Field `rx_proc` writer - "]
        pub type RX_PROC_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `ed_proc` reader - "]
        pub type ED_PROC_R = crate::hal::ral::BitReader;
        #[doc = "Field `ed_proc` writer - "]
        pub type ED_PROC_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `ed_trigger_tx_proc` reader - "]
        pub type ED_TRIGGER_TX_PROC_R = crate::hal::ral::BitReader;
        #[doc = "Field `ed_trigger_tx_proc` writer - "]
        pub type ED_TRIGGER_TX_PROC_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rf_ctrl_state` reader - "]
        pub type RF_CTRL_STATE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rf_ctrl_state` writer - "]
        pub type RF_CTRL_STATE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            pub fn txrx_state(&self) -> TXRX_STATE_R {
                TXRX_STATE_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn tx_proc(&self) -> TX_PROC_R {
                TX_PROC_R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            pub fn rx_proc(&self) -> RX_PROC_R {
                RX_PROC_R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            pub fn ed_proc(&self) -> ED_PROC_R {
                ED_PROC_R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn ed_trigger_tx_proc(&self) -> ED_TRIGGER_TX_PROC_R {
                ED_TRIGGER_TX_PROC_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 16:19"]
            #[inline(always)]
            pub fn rf_ctrl_state(&self) -> RF_CTRL_STATE_R {
                RF_CTRL_STATE_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            #[must_use]
            pub fn txrx_state(&mut self) -> TXRX_STATE_W<TXRX_STATUS_SPEC> {
                TXRX_STATE_W::new(self, 0)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            #[must_use]
            pub fn tx_proc(&mut self) -> TX_PROC_W<TXRX_STATUS_SPEC> {
                TX_PROC_W::new(self, 8)
            }
            #[doc = "Bit 9"]
            #[inline(always)]
            #[must_use]
            pub fn rx_proc(&mut self) -> RX_PROC_W<TXRX_STATUS_SPEC> {
                RX_PROC_W::new(self, 9)
            }
            #[doc = "Bit 10"]
            #[inline(always)]
            #[must_use]
            pub fn ed_proc(&mut self) -> ED_PROC_W<TXRX_STATUS_SPEC> {
                ED_PROC_W::new(self, 10)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            #[must_use]
            pub fn ed_trigger_tx_proc(&mut self) -> ED_TRIGGER_TX_PROC_W<TXRX_STATUS_SPEC> {
                ED_TRIGGER_TX_PROC_W::new(self, 11)
            }
            #[doc = "Bits 16:19"]
            #[inline(always)]
            #[must_use]
            pub fn rf_ctrl_state(&mut self) -> RF_CTRL_STATE_W<TXRX_STATUS_SPEC> {
                RF_CTRL_STATE_W::new(self, 16)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txrx_status::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txrx_status::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TXRX_STATUS_SPEC;
        impl crate::hal::ral::RegisterSpec for TXRX_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`txrx_status::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TXRX_STATUS_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`txrx_status::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TXRX_STATUS_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "tx_status (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_status::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_status::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_status`] module"]
    pub type TX_STATUS = crate::hal::ral::Reg<tx_status::TX_STATUS_SPEC>;
    #[doc = ""]
    pub mod tx_status {
        #[doc = "Register `tx_status` reader"]
        pub type R = crate::hal::ral::R<TX_STATUS_SPEC>;
        #[doc = "Register `tx_status` writer"]
        pub type W = crate::hal::ral::W<TX_STATUS_SPEC>;
        #[doc = "Field `tx_state` reader - "]
        pub type TX_STATE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `tx_state` writer - "]
        pub type TX_STATE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `tx_abort_status` reader - "]
        pub type TX_ABORT_STATUS_R = crate::hal::ral::FieldReader;
        #[doc = "Field `tx_abort_status` writer - "]
        pub type TX_ABORT_STATUS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 5>;
        #[doc = "Field `tx_sec_error_code` reader - "]
        pub type TX_SEC_ERROR_CODE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `tx_sec_error_code` writer - "]
        pub type TX_SEC_ERROR_CODE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            pub fn tx_state(&self) -> TX_STATE_R {
                TX_STATE_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:8"]
            #[inline(always)]
            pub fn tx_abort_status(&self) -> TX_ABORT_STATUS_R {
                TX_ABORT_STATUS_R::new(((self.bits >> 4) & 0x1f) as u8)
            }
            #[doc = "Bits 16:19"]
            #[inline(always)]
            pub fn tx_sec_error_code(&self) -> TX_SEC_ERROR_CODE_R {
                TX_SEC_ERROR_CODE_R::new(((self.bits >> 16) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            #[must_use]
            pub fn tx_state(&mut self) -> TX_STATE_W<TX_STATUS_SPEC> {
                TX_STATE_W::new(self, 0)
            }
            #[doc = "Bits 4:8"]
            #[inline(always)]
            #[must_use]
            pub fn tx_abort_status(&mut self) -> TX_ABORT_STATUS_W<TX_STATUS_SPEC> {
                TX_ABORT_STATUS_W::new(self, 4)
            }
            #[doc = "Bits 16:19"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sec_error_code(&mut self) -> TX_SEC_ERROR_CODE_W<TX_STATUS_SPEC> {
                TX_SEC_ERROR_CODE_W::new(self, 16)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_status::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_status::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TX_STATUS_SPEC;
        impl crate::hal::ral::RegisterSpec for TX_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tx_status::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TX_STATUS_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`tx_status::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TX_STATUS_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_status (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_status::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_status::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_status`] module"]
    pub type RX_STATUS = crate::hal::ral::Reg<rx_status::RX_STATUS_SPEC>;
    #[doc = ""]
    pub mod rx_status {
        #[doc = "Register `rx_status` reader"]
        pub type R = crate::hal::ral::R<RX_STATUS_SPEC>;
        #[doc = "Register `rx_status` writer"]
        pub type W = crate::hal::ral::W<RX_STATUS_SPEC>;
        #[doc = "Field `filter_fail_status` reader - "]
        pub type FILTER_FAIL_STATUS_R = crate::hal::ral::FieldReader;
        #[doc = "Field `filter_fail_status` writer - "]
        pub type FILTER_FAIL_STATUS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `rx_abort_status` reader - "]
        pub type RX_ABORT_STATUS_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rx_abort_status` writer - "]
        pub type RX_ABORT_STATUS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 5>;
        #[doc = "Field `rx_state` reader - "]
        pub type RX_STATE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `rx_state` writer - "]
        pub type RX_STATE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 3>;
        #[doc = "Field `preamble_match` reader - "]
        pub type PREAMBLE_MATCH_R = crate::hal::ral::BitReader;
        #[doc = "Field `preamble_match` writer - "]
        pub type PREAMBLE_MATCH_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `sfd_match` reader - "]
        pub type SFD_MATCH_R = crate::hal::ral::BitReader;
        #[doc = "Field `sfd_match` writer - "]
        pub type SFD_MATCH_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            pub fn filter_fail_status(&self) -> FILTER_FAIL_STATUS_R {
                FILTER_FAIL_STATUS_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:8"]
            #[inline(always)]
            pub fn rx_abort_status(&self) -> RX_ABORT_STATUS_R {
                RX_ABORT_STATUS_R::new(((self.bits >> 4) & 0x1f) as u8)
            }
            #[doc = "Bits 16:18"]
            #[inline(always)]
            pub fn rx_state(&self) -> RX_STATE_R {
                RX_STATE_R::new(((self.bits >> 16) & 7) as u8)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            pub fn preamble_match(&self) -> PREAMBLE_MATCH_R {
                PREAMBLE_MATCH_R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            pub fn sfd_match(&self) -> SFD_MATCH_R {
                SFD_MATCH_R::new(((self.bits >> 21) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            #[must_use]
            pub fn filter_fail_status(&mut self) -> FILTER_FAIL_STATUS_W<RX_STATUS_SPEC> {
                FILTER_FAIL_STATUS_W::new(self, 0)
            }
            #[doc = "Bits 4:8"]
            #[inline(always)]
            #[must_use]
            pub fn rx_abort_status(&mut self) -> RX_ABORT_STATUS_W<RX_STATUS_SPEC> {
                RX_ABORT_STATUS_W::new(self, 4)
            }
            #[doc = "Bits 16:18"]
            #[inline(always)]
            #[must_use]
            pub fn rx_state(&mut self) -> RX_STATE_W<RX_STATUS_SPEC> {
                RX_STATE_W::new(self, 16)
            }
            #[doc = "Bit 20"]
            #[inline(always)]
            #[must_use]
            pub fn preamble_match(&mut self) -> PREAMBLE_MATCH_W<RX_STATUS_SPEC> {
                PREAMBLE_MATCH_W::new(self, 20)
            }
            #[doc = "Bit 21"]
            #[inline(always)]
            #[must_use]
            pub fn sfd_match(&mut self) -> SFD_MATCH_W<RX_STATUS_SPEC> {
                SFD_MATCH_W::new(self, 21)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_status::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_status::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_STATUS_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_status::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_STATUS_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_status::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_STATUS_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "enhance_ack_cfg (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`enhance_ack_cfg::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`enhance_ack_cfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@enhance_ack_cfg`] module"]
    pub type ENHANCE_ACK_CFG = crate::hal::ral::Reg<enhance_ack_cfg::ENHANCE_ACK_CFG_SPEC>;
    #[doc = ""]
    pub mod enhance_ack_cfg {
        #[doc = "Register `enhance_ack_cfg` reader"]
        pub type R = crate::hal::ral::R<ENHANCE_ACK_CFG_SPEC>;
        #[doc = "Register `enhance_ack_cfg` writer"]
        pub type W = crate::hal::ral::W<ENHANCE_ACK_CFG_SPEC>;
        #[doc = "Field `tx_enh_ack_generate_done_notify` reader - "]
        pub type TX_ENH_ACK_GENERATE_DONE_NOTIFY_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `tx_enh_ack_generate_done_notify` writer - "]
        pub type TX_ENH_ACK_GENERATE_DONE_NOTIFY_W<'a, REG> =
            crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn tx_enh_ack_generate_done_notify(&self) -> TX_ENH_ACK_GENERATE_DONE_NOTIFY_R {
                TX_ENH_ACK_GENERATE_DONE_NOTIFY_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn tx_enh_ack_generate_done_notify(
                &mut self,
            ) -> TX_ENH_ACK_GENERATE_DONE_NOTIFY_W<ENHANCE_ACK_CFG_SPEC> {
                TX_ENH_ACK_GENERATE_DONE_NOTIFY_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`enhance_ack_cfg::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`enhance_ack_cfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ENHANCE_ACK_CFG_SPEC;
        impl crate::hal::ral::RegisterSpec for ENHANCE_ACK_CFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`enhance_ack_cfg::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ENHANCE_ACK_CFG_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`enhance_ack_cfg::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ENHANCE_ACK_CFG_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "tx_abort_interrupt_control (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_abort_interrupt_control::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_abort_interrupt_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_abort_interrupt_control`] module"]
    pub type TX_ABORT_INTERRUPT_CONTROL =
        crate::hal::ral::Reg<tx_abort_interrupt_control::TX_ABORT_INTERRUPT_CONTROL_SPEC>;
    #[doc = ""]
    pub mod tx_abort_interrupt_control {
        #[doc = "Register `tx_abort_interrupt_control` reader"]
        pub type R = crate::hal::ral::R<TX_ABORT_INTERRUPT_CONTROL_SPEC>;
        #[doc = "Register `tx_abort_interrupt_control` writer"]
        pub type W = crate::hal::ral::W<TX_ABORT_INTERRUPT_CONTROL_SPEC>;
        #[doc = "Field `tx_abort_interrupt_control` reader - "]
        pub type TX_ABORT_INTERRUPT_CONTROL_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `tx_abort_interrupt_control` writer - "]
        pub type TX_ABORT_INTERRUPT_CONTROL_W<'a, REG> =
            crate::hal::ral::FieldWriter<'a, REG, 31, u32>;
        impl R {
            #[doc = "Bits 0:30"]
            #[inline(always)]
            pub fn tx_abort_interrupt_control(&self) -> TX_ABORT_INTERRUPT_CONTROL_R {
                TX_ABORT_INTERRUPT_CONTROL_R::new(self.bits & 0x7fff_ffff)
            }
        }
        impl W {
            #[doc = "Bits 0:30"]
            #[inline(always)]
            #[must_use]
            pub fn tx_abort_interrupt_control(
                &mut self,
            ) -> TX_ABORT_INTERRUPT_CONTROL_W<TX_ABORT_INTERRUPT_CONTROL_SPEC> {
                TX_ABORT_INTERRUPT_CONTROL_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_abort_interrupt_control::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_abort_interrupt_control::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TX_ABORT_INTERRUPT_CONTROL_SPEC;
        impl crate::hal::ral::RegisterSpec for TX_ABORT_INTERRUPT_CONTROL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tx_abort_interrupt_control::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TX_ABORT_INTERRUPT_CONTROL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`tx_abort_interrupt_control::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TX_ABORT_INTERRUPT_CONTROL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "core_dummy_data (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`core_dummy_data::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`core_dummy_data::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@core_dummy_data`] module"]
    pub type CORE_DUMMY_DATA = crate::hal::ral::Reg<core_dummy_data::CORE_DUMMY_DATA_SPEC>;
    #[doc = ""]
    pub mod core_dummy_data {
        #[doc = "Register `core_dummy_data` reader"]
        pub type R = crate::hal::ral::R<CORE_DUMMY_DATA_SPEC>;
        #[doc = "Register `core_dummy_data` writer"]
        pub type W = crate::hal::ral::W<CORE_DUMMY_DATA_SPEC>;
        #[doc = "Field `core_dummy_data` reader - "]
        pub type CORE_DUMMY_DATA_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `core_dummy_data` writer - "]
        pub type CORE_DUMMY_DATA_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn core_dummy_data(&self) -> CORE_DUMMY_DATA_R {
                CORE_DUMMY_DATA_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn core_dummy_data(&mut self) -> CORE_DUMMY_DATA_W<CORE_DUMMY_DATA_SPEC> {
                CORE_DUMMY_DATA_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`core_dummy_data::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`core_dummy_data::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CORE_DUMMY_DATA_SPEC;
        impl crate::hal::ral::RegisterSpec for CORE_DUMMY_DATA_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`core_dummy_data::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CORE_DUMMY_DATA_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`core_dummy_data::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CORE_DUMMY_DATA_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "coex_pti (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`coex_pti::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`coex_pti::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@coex_pti`] module"]
    pub type COEX_PTI = crate::hal::ral::Reg<coex_pti::COEX_PTI_SPEC>;
    #[doc = ""]
    pub mod coex_pti {
        #[doc = "Register `coex_pti` reader"]
        pub type R = crate::hal::ral::R<COEX_PTI_SPEC>;
        #[doc = "Register `coex_pti` writer"]
        pub type W = crate::hal::ral::W<COEX_PTI_SPEC>;
        #[doc = "Field `coex_pti` reader - "]
        pub type COEX_PTI_R = crate::hal::ral::FieldReader;
        #[doc = "Field `coex_pti` writer - "]
        pub type COEX_PTI_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `coex_ack_pti` reader - "]
        pub type COEX_ACK_PTI_R = crate::hal::ral::FieldReader;
        #[doc = "Field `coex_ack_pti` writer - "]
        pub type COEX_ACK_PTI_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        #[doc = "Field `close_rf_sel` reader - "]
        pub type CLOSE_RF_SEL_R = crate::hal::ral::BitReader;
        #[doc = "Field `close_rf_sel` writer - "]
        pub type CLOSE_RF_SEL_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            pub fn coex_pti(&self) -> COEX_PTI_R {
                COEX_PTI_R::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7"]
            #[inline(always)]
            pub fn coex_ack_pti(&self) -> COEX_ACK_PTI_R {
                COEX_ACK_PTI_R::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            pub fn close_rf_sel(&self) -> CLOSE_RF_SEL_R {
                CLOSE_RF_SEL_R::new(((self.bits >> 8) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3"]
            #[inline(always)]
            #[must_use]
            pub fn coex_pti(&mut self) -> COEX_PTI_W<COEX_PTI_SPEC> {
                COEX_PTI_W::new(self, 0)
            }
            #[doc = "Bits 4:7"]
            #[inline(always)]
            #[must_use]
            pub fn coex_ack_pti(&mut self) -> COEX_ACK_PTI_W<COEX_PTI_SPEC> {
                COEX_ACK_PTI_W::new(self, 4)
            }
            #[doc = "Bit 8"]
            #[inline(always)]
            #[must_use]
            pub fn close_rf_sel(&mut self) -> CLOSE_RF_SEL_W<COEX_PTI_SPEC> {
                CLOSE_RF_SEL_W::new(self, 8)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`coex_pti::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`coex_pti::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct COEX_PTI_SPEC;
        impl crate::hal::ral::RegisterSpec for COEX_PTI_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`coex_pti::R`](R) reader structure"]
        impl crate::hal::ral::Readable for COEX_PTI_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`coex_pti::W`](W) writer structure"]
        impl crate::hal::ral::Writable for COEX_PTI_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ack_frame_pending_en (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ack_frame_pending_en::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ack_frame_pending_en::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ack_frame_pending_en`] module"]
    pub type ACK_FRAME_PENDING_EN =
        crate::hal::ral::Reg<ack_frame_pending_en::ACK_FRAME_PENDING_EN_SPEC>;
    #[doc = ""]
    pub mod ack_frame_pending_en {
        #[doc = "Register `ack_frame_pending_en` reader"]
        pub type R = crate::hal::ral::R<ACK_FRAME_PENDING_EN_SPEC>;
        #[doc = "Register `ack_frame_pending_en` writer"]
        pub type W = crate::hal::ral::W<ACK_FRAME_PENDING_EN_SPEC>;
        #[doc = "Field `ack_frame_pending_en` reader - "]
        pub type ACK_FRAME_PENDING_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `ack_frame_pending_en` writer - "]
        pub type ACK_FRAME_PENDING_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `ack_tx_ack_timeout` reader - "]
        pub type ACK_TX_ACK_TIMEOUT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `ack_tx_ack_timeout` writer - "]
        pub type ACK_TX_ACK_TIMEOUT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn ack_frame_pending_en(&self) -> ACK_FRAME_PENDING_EN_R {
                ACK_FRAME_PENDING_EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bits 16:31"]
            #[inline(always)]
            pub fn ack_tx_ack_timeout(&self) -> ACK_TX_ACK_TIMEOUT_R {
                ACK_TX_ACK_TIMEOUT_R::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn ack_frame_pending_en(
                &mut self,
            ) -> ACK_FRAME_PENDING_EN_W<ACK_FRAME_PENDING_EN_SPEC> {
                ACK_FRAME_PENDING_EN_W::new(self, 0)
            }
            #[doc = "Bits 16:31"]
            #[inline(always)]
            #[must_use]
            pub fn ack_tx_ack_timeout(
                &mut self,
            ) -> ACK_TX_ACK_TIMEOUT_W<ACK_FRAME_PENDING_EN_SPEC> {
                ACK_TX_ACK_TIMEOUT_W::new(self, 16)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ack_frame_pending_en::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ack_frame_pending_en::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ACK_FRAME_PENDING_EN_SPEC;
        impl crate::hal::ral::RegisterSpec for ACK_FRAME_PENDING_EN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ack_frame_pending_en::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ACK_FRAME_PENDING_EN_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ack_frame_pending_en::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ACK_FRAME_PENDING_EN_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "rx_abort_intr_ctrl (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_abort_intr_ctrl::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_abort_intr_ctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rx_abort_intr_ctrl`] module"]
    pub type RX_ABORT_INTR_CTRL = crate::hal::ral::Reg<rx_abort_intr_ctrl::RX_ABORT_INTR_CTRL_SPEC>;
    #[doc = ""]
    pub mod rx_abort_intr_ctrl {
        #[doc = "Register `rx_abort_intr_ctrl` reader"]
        pub type R = crate::hal::ral::R<RX_ABORT_INTR_CTRL_SPEC>;
        #[doc = "Register `rx_abort_intr_ctrl` writer"]
        pub type W = crate::hal::ral::W<RX_ABORT_INTR_CTRL_SPEC>;
        #[doc = "Field `rx_abort_intr_ctrl` reader - "]
        pub type RX_ABORT_INTR_CTRL_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `rx_abort_intr_ctrl` writer - "]
        pub type RX_ABORT_INTR_CTRL_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 31, u32>;
        impl R {
            #[doc = "Bits 0:30"]
            #[inline(always)]
            pub fn rx_abort_intr_ctrl(&self) -> RX_ABORT_INTR_CTRL_R {
                RX_ABORT_INTR_CTRL_R::new(self.bits & 0x7fff_ffff)
            }
        }
        impl W {
            #[doc = "Bits 0:30"]
            #[inline(always)]
            #[must_use]
            pub fn rx_abort_intr_ctrl(&mut self) -> RX_ABORT_INTR_CTRL_W<RX_ABORT_INTR_CTRL_SPEC> {
                RX_ABORT_INTR_CTRL_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rx_abort_intr_ctrl::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rx_abort_intr_ctrl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RX_ABORT_INTR_CTRL_SPEC;
        impl crate::hal::ral::RegisterSpec for RX_ABORT_INTR_CTRL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rx_abort_intr_ctrl::R`](R) reader structure"]
        impl crate::hal::ral::Readable for RX_ABORT_INTR_CTRL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`rx_abort_intr_ctrl::W`](W) writer structure"]
        impl crate::hal::ral::Writable for RX_ABORT_INTR_CTRL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "event_status (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`event_status::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`event_status::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@event_status`] module"]
    pub type EVENT_STATUS = crate::hal::ral::Reg<event_status::EVENT_STATUS_SPEC>;
    #[doc = ""]
    pub mod event_status {
        #[doc = "Register `event_status` reader"]
        pub type R = crate::hal::ral::R<EVENT_STATUS_SPEC>;
        #[doc = "Register `event_status` writer"]
        pub type W = crate::hal::ral::W<EVENT_STATUS_SPEC>;
        #[doc = "Field `event_status` reader - "]
        pub type EVENT_STATUS_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `event_status` writer - "]
        pub type EVENT_STATUS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 13, u16>;
        impl R {
            #[doc = "Bits 0:12"]
            #[inline(always)]
            pub fn event_status(&self) -> EVENT_STATUS_R {
                EVENT_STATUS_R::new((self.bits & 0x1fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:12"]
            #[inline(always)]
            #[must_use]
            pub fn event_status(&mut self) -> EVENT_STATUS_W<EVENT_STATUS_SPEC> {
                EVENT_STATUS_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`event_status::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`event_status::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct EVENT_STATUS_SPEC;
        impl crate::hal::ral::RegisterSpec for EVENT_STATUS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`event_status::R`](R) reader structure"]
        impl crate::hal::ral::Readable for EVENT_STATUS_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`event_status::W`](W) writer structure"]
        impl crate::hal::ral::Writable for EVENT_STATUS_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "event_en (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`event_en::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`event_en::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@event_en`] module"]
    pub type EVENT_EN = crate::hal::ral::Reg<event_en::EVENT_EN_SPEC>;
    #[doc = ""]
    pub mod event_en {
        #[doc = "Register `event_en` reader"]
        pub type R = crate::hal::ral::R<EVENT_EN_SPEC>;
        #[doc = "Register `event_en` writer"]
        pub type W = crate::hal::ral::W<EVENT_EN_SPEC>;
        #[doc = "Field `event_en` reader - "]
        pub type EVENT_EN_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `event_en` writer - "]
        pub type EVENT_EN_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 13, u16>;
        impl R {
            #[doc = "Bits 0:12"]
            #[inline(always)]
            pub fn event_en(&self) -> EVENT_EN_R {
                EVENT_EN_R::new((self.bits & 0x1fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:12"]
            #[inline(always)]
            #[must_use]
            pub fn event_en(&mut self) -> EVENT_EN_W<EVENT_EN_SPEC> {
                EVENT_EN_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`event_en::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`event_en::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct EVENT_EN_SPEC;
        impl crate::hal::ral::RegisterSpec for EVENT_EN_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`event_en::R`](R) reader structure"]
        impl crate::hal::ral::Readable for EVENT_EN_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`event_en::W`](W) writer structure"]
        impl crate::hal::ral::Writable for EVENT_EN_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ack_timeout (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ack_timeout::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ack_timeout::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ack_timeout`] module"]
    pub type ACK_TIMEOUT = crate::hal::ral::Reg<ack_timeout::ACK_TIMEOUT_SPEC>;
    #[doc = ""]
    pub mod ack_timeout {
        #[doc = "Register `ack_timeout` reader"]
        pub type R = crate::hal::ral::R<ACK_TIMEOUT_SPEC>;
        #[doc = "Register `ack_timeout` writer"]
        pub type W = crate::hal::ral::W<ACK_TIMEOUT_SPEC>;
        #[doc = "Field `ack_timeout` reader - "]
        pub type ACK_TIMEOUT_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `ack_timeout` writer - "]
        pub type ACK_TIMEOUT_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn ack_timeout(&self) -> ACK_TIMEOUT_R {
                ACK_TIMEOUT_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn ack_timeout(&mut self) -> ACK_TIMEOUT_W<ACK_TIMEOUT_SPEC> {
                ACK_TIMEOUT_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ack_timeout::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ack_timeout::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ACK_TIMEOUT_SPEC;
        impl crate::hal::ral::RegisterSpec for ACK_TIMEOUT_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ack_timeout::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ACK_TIMEOUT_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ack_timeout::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ACK_TIMEOUT_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ifs (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ifs::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ifs::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ifs`] module"]
    pub type IFS = crate::hal::ral::Reg<ifs::IFS_SPEC>;
    #[doc = ""]
    pub mod ifs {
        #[doc = "Register `ifs` reader"]
        pub type R = crate::hal::ral::R<IFS_SPEC>;
        #[doc = "Register `ifs` writer"]
        pub type W = crate::hal::ral::W<IFS_SPEC>;
        #[doc = "Field `sifs` reader - "]
        pub type SIFS_R = crate::hal::ral::FieldReader;
        #[doc = "Field `sifs` writer - "]
        pub type SIFS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 8>;
        #[doc = "Field `lifs` reader - "]
        pub type LIFS_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `lifs` writer - "]
        pub type LIFS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 10, u16>;
        impl R {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            pub fn sifs(&self) -> SIFS_R {
                SIFS_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 16:25"]
            #[inline(always)]
            pub fn lifs(&self) -> LIFS_R {
                LIFS_R::new(((self.bits >> 16) & 0x03ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            #[must_use]
            pub fn sifs(&mut self) -> SIFS_W<IFS_SPEC> {
                SIFS_W::new(self, 0)
            }
            #[doc = "Bits 16:25"]
            #[inline(always)]
            #[must_use]
            pub fn lifs(&mut self) -> LIFS_W<IFS_SPEC> {
                LIFS_W::new(self, 16)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ifs::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ifs::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IFS_SPEC;
        impl crate::hal::ral::RegisterSpec for IFS_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ifs::R`](R) reader structure"]
        impl crate::hal::ral::Readable for IFS_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ifs::W`](W) writer structure"]
        impl crate::hal::ral::Writable for IFS_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ed_scan_cfg (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_scan_cfg::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_scan_cfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ed_scan_cfg`] module"]
    pub type ED_SCAN_CFG = crate::hal::ral::Reg<ed_scan_cfg::ED_SCAN_CFG_SPEC>;
    #[doc = ""]
    pub mod ed_scan_cfg {
        #[doc = "Register `ed_scan_cfg` reader"]
        pub type R = crate::hal::ral::R<ED_SCAN_CFG_SPEC>;
        #[doc = "Register `ed_scan_cfg` writer"]
        pub type W = crate::hal::ral::W<ED_SCAN_CFG_SPEC>;
        #[doc = "Field `cca_ed_threshold` reader - "]
        pub type CCA_ED_THRESHOLD_R = crate::hal::ral::FieldReader;
        #[doc = "Field `cca_ed_threshold` writer - "]
        pub type CCA_ED_THRESHOLD_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ed_sample_mode` reader - "]
        pub type ED_SAMPLE_MODE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `ed_sample_mode` writer - "]
        pub type ED_SAMPLE_MODE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 2>;
        #[doc = "Field `dis_ed_power_sel` reader - "]
        pub type DIS_ED_POWER_SEL_R = crate::hal::ral::BitReader;
        #[doc = "Field `dis_ed_power_sel` writer - "]
        pub type DIS_ED_POWER_SEL_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `cca_mode` reader - "]
        pub type CCA_MODE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `cca_mode` writer - "]
        pub type CCA_MODE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 2>;
        #[doc = "Field `ed_rss` reader - "]
        pub type ED_RSS_R = crate::hal::ral::FieldReader;
        #[doc = "Field `ed_rss` writer - "]
        pub type ED_RSS_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 8>;
        #[doc = "Field `cca_busy` reader - "]
        pub type CCA_BUSY_R = crate::hal::ral::BitReader;
        #[doc = "Field `cca_busy` writer - "]
        pub type CCA_BUSY_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            pub fn cca_ed_threshold(&self) -> CCA_ED_THRESHOLD_R {
                CCA_ED_THRESHOLD_R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 11:12"]
            #[inline(always)]
            pub fn ed_sample_mode(&self) -> ED_SAMPLE_MODE_R {
                ED_SAMPLE_MODE_R::new(((self.bits >> 11) & 3) as u8)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            pub fn dis_ed_power_sel(&self) -> DIS_ED_POWER_SEL_R {
                DIS_ED_POWER_SEL_R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bits 14:15"]
            #[inline(always)]
            pub fn cca_mode(&self) -> CCA_MODE_R {
                CCA_MODE_R::new(((self.bits >> 14) & 3) as u8)
            }
            #[doc = "Bits 16:23"]
            #[inline(always)]
            pub fn ed_rss(&self) -> ED_RSS_R {
                ED_RSS_R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn cca_busy(&self) -> CCA_BUSY_R {
                CCA_BUSY_R::new(((self.bits >> 24) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            #[must_use]
            pub fn cca_ed_threshold(&mut self) -> CCA_ED_THRESHOLD_W<ED_SCAN_CFG_SPEC> {
                CCA_ED_THRESHOLD_W::new(self, 0)
            }
            #[doc = "Bits 11:12"]
            #[inline(always)]
            #[must_use]
            pub fn ed_sample_mode(&mut self) -> ED_SAMPLE_MODE_W<ED_SCAN_CFG_SPEC> {
                ED_SAMPLE_MODE_W::new(self, 11)
            }
            #[doc = "Bit 13"]
            #[inline(always)]
            #[must_use]
            pub fn dis_ed_power_sel(&mut self) -> DIS_ED_POWER_SEL_W<ED_SCAN_CFG_SPEC> {
                DIS_ED_POWER_SEL_W::new(self, 13)
            }
            #[doc = "Bits 14:15"]
            #[inline(always)]
            #[must_use]
            pub fn cca_mode(&mut self) -> CCA_MODE_W<ED_SCAN_CFG_SPEC> {
                CCA_MODE_W::new(self, 14)
            }
            #[doc = "Bits 16:23"]
            #[inline(always)]
            #[must_use]
            pub fn ed_rss(&mut self) -> ED_RSS_W<ED_SCAN_CFG_SPEC> {
                ED_RSS_W::new(self, 16)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            #[must_use]
            pub fn cca_busy(&mut self) -> CCA_BUSY_W<ED_SCAN_CFG_SPEC> {
                CCA_BUSY_W::new(self, 24)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_scan_cfg::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_scan_cfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ED_SCAN_CFG_SPEC;
        impl crate::hal::ral::RegisterSpec for ED_SCAN_CFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ed_scan_cfg::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ED_SCAN_CFG_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ed_scan_cfg::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ED_SCAN_CFG_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ed_scan_duration (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_scan_duration::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_scan_duration::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ed_scan_duration`] module"]
    pub type ED_SCAN_DURATION = crate::hal::ral::Reg<ed_scan_duration::ED_SCAN_DURATION_SPEC>;
    #[doc = ""]
    pub mod ed_scan_duration {
        #[doc = "Register `ed_scan_duration` reader"]
        pub type R = crate::hal::ral::R<ED_SCAN_DURATION_SPEC>;
        #[doc = "Register `ed_scan_duration` writer"]
        pub type W = crate::hal::ral::W<ED_SCAN_DURATION_SPEC>;
        #[doc = "Field `ed_scan_duration` reader - "]
        pub type ED_SCAN_DURATION_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `ed_scan_duration` writer - "]
        pub type ED_SCAN_DURATION_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 24, u32>;
        #[doc = "Field `ed_scan_wait_dly` reader - "]
        pub type ED_SCAN_WAIT_DLY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `ed_scan_wait_dly` writer - "]
        pub type ED_SCAN_WAIT_DLY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:23"]
            #[inline(always)]
            pub fn ed_scan_duration(&self) -> ED_SCAN_DURATION_R {
                ED_SCAN_DURATION_R::new(self.bits & 0x00ff_ffff)
            }
            #[doc = "Bits 24:27"]
            #[inline(always)]
            pub fn ed_scan_wait_dly(&self) -> ED_SCAN_WAIT_DLY_R {
                ED_SCAN_WAIT_DLY_R::new(((self.bits >> 24) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:23"]
            #[inline(always)]
            #[must_use]
            pub fn ed_scan_duration(&mut self) -> ED_SCAN_DURATION_W<ED_SCAN_DURATION_SPEC> {
                ED_SCAN_DURATION_W::new(self, 0)
            }
            #[doc = "Bits 24:27"]
            #[inline(always)]
            #[must_use]
            pub fn ed_scan_wait_dly(&mut self) -> ED_SCAN_WAIT_DLY_W<ED_SCAN_DURATION_SPEC> {
                ED_SCAN_WAIT_DLY_W::new(self, 24)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ed_scan_duration::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ed_scan_duration::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ED_SCAN_DURATION_SPEC;
        impl crate::hal::ral::RegisterSpec for ED_SCAN_DURATION_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ed_scan_duration::R`](R) reader structure"]
        impl crate::hal::ral::Readable for ED_SCAN_DURATION_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ed_scan_duration::W`](W) writer structure"]
        impl crate::hal::ral::Writable for ED_SCAN_DURATION_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "tx_power (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_power::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_power::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tx_power`] module"]
    pub type TX_POWER = crate::hal::ral::Reg<tx_power::TX_POWER_SPEC>;
    #[doc = ""]
    pub mod tx_power {
        #[doc = "Register `tx_power` reader"]
        pub type R = crate::hal::ral::R<TX_POWER_SPEC>;
        #[doc = "Register `tx_power` writer"]
        pub type W = crate::hal::ral::W<TX_POWER_SPEC>;
        #[doc = "Field `tx_power` reader - "]
        pub type TX_POWER_R = crate::hal::ral::FieldReader;
        #[doc = "Field `tx_power` writer - "]
        pub type TX_POWER_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4"]
            #[inline(always)]
            pub fn tx_power(&self) -> TX_POWER_R {
                TX_POWER_R::new((self.bits & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4"]
            #[inline(always)]
            #[must_use]
            pub fn tx_power(&mut self) -> TX_POWER_W<TX_POWER_SPEC> {
                TX_POWER_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`tx_power::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`tx_power::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TX_POWER_SPEC;
        impl crate::hal::ral::RegisterSpec for TX_POWER_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tx_power::R`](R) reader structure"]
        impl crate::hal::ral::Readable for TX_POWER_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`tx_power::W`](W) writer structure"]
        impl crate::hal::ral::Writable for TX_POWER_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "channel (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`channel::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`channel::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@channel`] module"]
    pub type CHANNEL = crate::hal::ral::Reg<channel::CHANNEL_SPEC>;
    #[doc = ""]
    pub mod channel {
        #[doc = "Register `channel` reader"]
        pub type R = crate::hal::ral::R<CHANNEL_SPEC>;
        #[doc = "Register `channel` writer"]
        pub type W = crate::hal::ral::W<CHANNEL_SPEC>;
        #[doc = "Field `hop` reader - "]
        pub type HOP_R = crate::hal::ral::FieldReader;
        #[doc = "Field `hop` writer - "]
        pub type HOP_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 7>;
        impl R {
            #[doc = "Bits 0:6"]
            #[inline(always)]
            pub fn hop(&self) -> HOP_R {
                HOP_R::new((self.bits & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:6"]
            #[inline(always)]
            #[must_use]
            pub fn hop(&mut self) -> HOP_W<CHANNEL_SPEC> {
                HOP_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`channel::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`channel::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CHANNEL_SPEC;
        impl crate::hal::ral::RegisterSpec for CHANNEL_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`channel::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CHANNEL_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`channel::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CHANNEL_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf3_extend_addr1 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_extend_addr1::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_extend_addr1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf3_extend_addr1`] module"]
    pub type INF3_EXTEND_ADDR1 = crate::hal::ral::Reg<inf3_extend_addr1::INF3_EXTEND_ADDR1_SPEC>;
    #[doc = ""]
    pub mod inf3_extend_addr1 {
        #[doc = "Register `inf3_extend_addr1` reader"]
        pub type R = crate::hal::ral::R<INF3_EXTEND_ADDR1_SPEC>;
        #[doc = "Register `inf3_extend_addr1` writer"]
        pub type W = crate::hal::ral::W<INF3_EXTEND_ADDR1_SPEC>;
        #[doc = "Field `mac_inf3_extend_addr1` reader - "]
        pub type MAC_INF3_EXTEND_ADDR1_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf3_extend_addr1` writer - "]
        pub type MAC_INF3_EXTEND_ADDR1_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf3_extend_addr1(&self) -> MAC_INF3_EXTEND_ADDR1_R {
                MAC_INF3_EXTEND_ADDR1_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf3_extend_addr1(
                &mut self,
            ) -> MAC_INF3_EXTEND_ADDR1_W<INF3_EXTEND_ADDR1_SPEC> {
                MAC_INF3_EXTEND_ADDR1_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_extend_addr1::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_extend_addr1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF3_EXTEND_ADDR1_SPEC;
        impl crate::hal::ral::RegisterSpec for INF3_EXTEND_ADDR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf3_extend_addr1::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF3_EXTEND_ADDR1_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf3_extend_addr1::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF3_EXTEND_ADDR1_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf3_extend_addr0 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_extend_addr0::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_extend_addr0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf3_extend_addr0`] module"]
    pub type INF3_EXTEND_ADDR0 = crate::hal::ral::Reg<inf3_extend_addr0::INF3_EXTEND_ADDR0_SPEC>;
    #[doc = ""]
    pub mod inf3_extend_addr0 {
        #[doc = "Register `inf3_extend_addr0` reader"]
        pub type R = crate::hal::ral::R<INF3_EXTEND_ADDR0_SPEC>;
        #[doc = "Register `inf3_extend_addr0` writer"]
        pub type W = crate::hal::ral::W<INF3_EXTEND_ADDR0_SPEC>;
        #[doc = "Field `mac_inf3_extend_addr0` reader - "]
        pub type MAC_INF3_EXTEND_ADDR0_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf3_extend_addr0` writer - "]
        pub type MAC_INF3_EXTEND_ADDR0_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf3_extend_addr0(&self) -> MAC_INF3_EXTEND_ADDR0_R {
                MAC_INF3_EXTEND_ADDR0_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf3_extend_addr0(
                &mut self,
            ) -> MAC_INF3_EXTEND_ADDR0_W<INF3_EXTEND_ADDR0_SPEC> {
                MAC_INF3_EXTEND_ADDR0_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_extend_addr0::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_extend_addr0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF3_EXTEND_ADDR0_SPEC;
        impl crate::hal::ral::RegisterSpec for INF3_EXTEND_ADDR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf3_extend_addr0::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF3_EXTEND_ADDR0_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf3_extend_addr0::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF3_EXTEND_ADDR0_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf3_pan_id (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_pan_id::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_pan_id::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf3_pan_id`] module"]
    pub type INF3_PAN_ID = crate::hal::ral::Reg<inf3_pan_id::INF3_PAN_ID_SPEC>;
    #[doc = ""]
    pub mod inf3_pan_id {
        #[doc = "Register `inf3_pan_id` reader"]
        pub type R = crate::hal::ral::R<INF3_PAN_ID_SPEC>;
        #[doc = "Register `inf3_pan_id` writer"]
        pub type W = crate::hal::ral::W<INF3_PAN_ID_SPEC>;
        #[doc = "Field `mac_inf3_pan_id` reader - "]
        pub type MAC_INF3_PAN_ID_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf3_pan_id` writer - "]
        pub type MAC_INF3_PAN_ID_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf3_pan_id(&self) -> MAC_INF3_PAN_ID_R {
                MAC_INF3_PAN_ID_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf3_pan_id(&mut self) -> MAC_INF3_PAN_ID_W<INF3_PAN_ID_SPEC> {
                MAC_INF3_PAN_ID_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_pan_id::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_pan_id::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF3_PAN_ID_SPEC;
        impl crate::hal::ral::RegisterSpec for INF3_PAN_ID_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf3_pan_id::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF3_PAN_ID_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf3_pan_id::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF3_PAN_ID_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf3_short_addr (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_short_addr::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_short_addr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf3_short_addr`] module"]
    pub type INF3_SHORT_ADDR = crate::hal::ral::Reg<inf3_short_addr::INF3_SHORT_ADDR_SPEC>;
    #[doc = ""]
    pub mod inf3_short_addr {
        #[doc = "Register `inf3_short_addr` reader"]
        pub type R = crate::hal::ral::R<INF3_SHORT_ADDR_SPEC>;
        #[doc = "Register `inf3_short_addr` writer"]
        pub type W = crate::hal::ral::W<INF3_SHORT_ADDR_SPEC>;
        #[doc = "Field `mac_inf3_short_addr` reader - "]
        pub type MAC_INF3_SHORT_ADDR_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf3_short_addr` writer - "]
        pub type MAC_INF3_SHORT_ADDR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf3_short_addr(&self) -> MAC_INF3_SHORT_ADDR_R {
                MAC_INF3_SHORT_ADDR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf3_short_addr(&mut self) -> MAC_INF3_SHORT_ADDR_W<INF3_SHORT_ADDR_SPEC> {
                MAC_INF3_SHORT_ADDR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf3_short_addr::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf3_short_addr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF3_SHORT_ADDR_SPEC;
        impl crate::hal::ral::RegisterSpec for INF3_SHORT_ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf3_short_addr::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF3_SHORT_ADDR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf3_short_addr::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF3_SHORT_ADDR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf2_extend_addr1 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_extend_addr1::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_extend_addr1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf2_extend_addr1`] module"]
    pub type INF2_EXTEND_ADDR1 = crate::hal::ral::Reg<inf2_extend_addr1::INF2_EXTEND_ADDR1_SPEC>;
    #[doc = ""]
    pub mod inf2_extend_addr1 {
        #[doc = "Register `inf2_extend_addr1` reader"]
        pub type R = crate::hal::ral::R<INF2_EXTEND_ADDR1_SPEC>;
        #[doc = "Register `inf2_extend_addr1` writer"]
        pub type W = crate::hal::ral::W<INF2_EXTEND_ADDR1_SPEC>;
        #[doc = "Field `mac_inf2_extend_addr1` reader - "]
        pub type MAC_INF2_EXTEND_ADDR1_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf2_extend_addr1` writer - "]
        pub type MAC_INF2_EXTEND_ADDR1_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf2_extend_addr1(&self) -> MAC_INF2_EXTEND_ADDR1_R {
                MAC_INF2_EXTEND_ADDR1_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf2_extend_addr1(
                &mut self,
            ) -> MAC_INF2_EXTEND_ADDR1_W<INF2_EXTEND_ADDR1_SPEC> {
                MAC_INF2_EXTEND_ADDR1_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_extend_addr1::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_extend_addr1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF2_EXTEND_ADDR1_SPEC;
        impl crate::hal::ral::RegisterSpec for INF2_EXTEND_ADDR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf2_extend_addr1::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF2_EXTEND_ADDR1_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf2_extend_addr1::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF2_EXTEND_ADDR1_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf2_extend_addr0 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_extend_addr0::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_extend_addr0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf2_extend_addr0`] module"]
    pub type INF2_EXTEND_ADDR0 = crate::hal::ral::Reg<inf2_extend_addr0::INF2_EXTEND_ADDR0_SPEC>;
    #[doc = ""]
    pub mod inf2_extend_addr0 {
        #[doc = "Register `inf2_extend_addr0` reader"]
        pub type R = crate::hal::ral::R<INF2_EXTEND_ADDR0_SPEC>;
        #[doc = "Register `inf2_extend_addr0` writer"]
        pub type W = crate::hal::ral::W<INF2_EXTEND_ADDR0_SPEC>;
        #[doc = "Field `mac_inf2_extend_addr0` reader - "]
        pub type MAC_INF2_EXTEND_ADDR0_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf2_extend_addr0` writer - "]
        pub type MAC_INF2_EXTEND_ADDR0_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf2_extend_addr0(&self) -> MAC_INF2_EXTEND_ADDR0_R {
                MAC_INF2_EXTEND_ADDR0_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf2_extend_addr0(
                &mut self,
            ) -> MAC_INF2_EXTEND_ADDR0_W<INF2_EXTEND_ADDR0_SPEC> {
                MAC_INF2_EXTEND_ADDR0_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_extend_addr0::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_extend_addr0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF2_EXTEND_ADDR0_SPEC;
        impl crate::hal::ral::RegisterSpec for INF2_EXTEND_ADDR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf2_extend_addr0::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF2_EXTEND_ADDR0_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf2_extend_addr0::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF2_EXTEND_ADDR0_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf2_pan_id (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_pan_id::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_pan_id::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf2_pan_id`] module"]
    pub type INF2_PAN_ID = crate::hal::ral::Reg<inf2_pan_id::INF2_PAN_ID_SPEC>;
    #[doc = ""]
    pub mod inf2_pan_id {
        #[doc = "Register `inf2_pan_id` reader"]
        pub type R = crate::hal::ral::R<INF2_PAN_ID_SPEC>;
        #[doc = "Register `inf2_pan_id` writer"]
        pub type W = crate::hal::ral::W<INF2_PAN_ID_SPEC>;
        #[doc = "Field `mac_inf2_pan_id` reader - "]
        pub type MAC_INF2_PAN_ID_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf2_pan_id` writer - "]
        pub type MAC_INF2_PAN_ID_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf2_pan_id(&self) -> MAC_INF2_PAN_ID_R {
                MAC_INF2_PAN_ID_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf2_pan_id(&mut self) -> MAC_INF2_PAN_ID_W<INF2_PAN_ID_SPEC> {
                MAC_INF2_PAN_ID_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_pan_id::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_pan_id::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF2_PAN_ID_SPEC;
        impl crate::hal::ral::RegisterSpec for INF2_PAN_ID_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf2_pan_id::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF2_PAN_ID_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf2_pan_id::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF2_PAN_ID_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf2_short_addr (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_short_addr::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_short_addr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf2_short_addr`] module"]
    pub type INF2_SHORT_ADDR = crate::hal::ral::Reg<inf2_short_addr::INF2_SHORT_ADDR_SPEC>;
    #[doc = ""]
    pub mod inf2_short_addr {
        #[doc = "Register `inf2_short_addr` reader"]
        pub type R = crate::hal::ral::R<INF2_SHORT_ADDR_SPEC>;
        #[doc = "Register `inf2_short_addr` writer"]
        pub type W = crate::hal::ral::W<INF2_SHORT_ADDR_SPEC>;
        #[doc = "Field `mac_inf2_short_addr` reader - "]
        pub type MAC_INF2_SHORT_ADDR_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf2_short_addr` writer - "]
        pub type MAC_INF2_SHORT_ADDR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf2_short_addr(&self) -> MAC_INF2_SHORT_ADDR_R {
                MAC_INF2_SHORT_ADDR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf2_short_addr(&mut self) -> MAC_INF2_SHORT_ADDR_W<INF2_SHORT_ADDR_SPEC> {
                MAC_INF2_SHORT_ADDR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf2_short_addr::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf2_short_addr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF2_SHORT_ADDR_SPEC;
        impl crate::hal::ral::RegisterSpec for INF2_SHORT_ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf2_short_addr::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF2_SHORT_ADDR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf2_short_addr::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF2_SHORT_ADDR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf1_extend_addr1 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_extend_addr1::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_extend_addr1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf1_extend_addr1`] module"]
    pub type INF1_EXTEND_ADDR1 = crate::hal::ral::Reg<inf1_extend_addr1::INF1_EXTEND_ADDR1_SPEC>;
    #[doc = ""]
    pub mod inf1_extend_addr1 {
        #[doc = "Register `inf1_extend_addr1` reader"]
        pub type R = crate::hal::ral::R<INF1_EXTEND_ADDR1_SPEC>;
        #[doc = "Register `inf1_extend_addr1` writer"]
        pub type W = crate::hal::ral::W<INF1_EXTEND_ADDR1_SPEC>;
        #[doc = "Field `mac_inf1_extend_addr1` reader - "]
        pub type MAC_INF1_EXTEND_ADDR1_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf1_extend_addr1` writer - "]
        pub type MAC_INF1_EXTEND_ADDR1_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf1_extend_addr1(&self) -> MAC_INF1_EXTEND_ADDR1_R {
                MAC_INF1_EXTEND_ADDR1_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf1_extend_addr1(
                &mut self,
            ) -> MAC_INF1_EXTEND_ADDR1_W<INF1_EXTEND_ADDR1_SPEC> {
                MAC_INF1_EXTEND_ADDR1_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_extend_addr1::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_extend_addr1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF1_EXTEND_ADDR1_SPEC;
        impl crate::hal::ral::RegisterSpec for INF1_EXTEND_ADDR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf1_extend_addr1::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF1_EXTEND_ADDR1_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf1_extend_addr1::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF1_EXTEND_ADDR1_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf1_extend_addr0 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_extend_addr0::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_extend_addr0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf1_extend_addr0`] module"]
    pub type INF1_EXTEND_ADDR0 = crate::hal::ral::Reg<inf1_extend_addr0::INF1_EXTEND_ADDR0_SPEC>;
    #[doc = ""]
    pub mod inf1_extend_addr0 {
        #[doc = "Register `inf1_extend_addr0` reader"]
        pub type R = crate::hal::ral::R<INF1_EXTEND_ADDR0_SPEC>;
        #[doc = "Register `inf1_extend_addr0` writer"]
        pub type W = crate::hal::ral::W<INF1_EXTEND_ADDR0_SPEC>;
        #[doc = "Field `mac_inf1_extend_addr0` reader - "]
        pub type MAC_INF1_EXTEND_ADDR0_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf1_extend_addr0` writer - "]
        pub type MAC_INF1_EXTEND_ADDR0_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf1_extend_addr0(&self) -> MAC_INF1_EXTEND_ADDR0_R {
                MAC_INF1_EXTEND_ADDR0_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf1_extend_addr0(
                &mut self,
            ) -> MAC_INF1_EXTEND_ADDR0_W<INF1_EXTEND_ADDR0_SPEC> {
                MAC_INF1_EXTEND_ADDR0_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_extend_addr0::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_extend_addr0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF1_EXTEND_ADDR0_SPEC;
        impl crate::hal::ral::RegisterSpec for INF1_EXTEND_ADDR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf1_extend_addr0::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF1_EXTEND_ADDR0_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf1_extend_addr0::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF1_EXTEND_ADDR0_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf1_pan_id (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_pan_id::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_pan_id::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf1_pan_id`] module"]
    pub type INF1_PAN_ID = crate::hal::ral::Reg<inf1_pan_id::INF1_PAN_ID_SPEC>;
    #[doc = ""]
    pub mod inf1_pan_id {
        #[doc = "Register `inf1_pan_id` reader"]
        pub type R = crate::hal::ral::R<INF1_PAN_ID_SPEC>;
        #[doc = "Register `inf1_pan_id` writer"]
        pub type W = crate::hal::ral::W<INF1_PAN_ID_SPEC>;
        #[doc = "Field `mac_inf1_pan_id` reader - "]
        pub type MAC_INF1_PAN_ID_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf1_pan_id` writer - "]
        pub type MAC_INF1_PAN_ID_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf1_pan_id(&self) -> MAC_INF1_PAN_ID_R {
                MAC_INF1_PAN_ID_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf1_pan_id(&mut self) -> MAC_INF1_PAN_ID_W<INF1_PAN_ID_SPEC> {
                MAC_INF1_PAN_ID_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_pan_id::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_pan_id::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF1_PAN_ID_SPEC;
        impl crate::hal::ral::RegisterSpec for INF1_PAN_ID_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf1_pan_id::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF1_PAN_ID_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf1_pan_id::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF1_PAN_ID_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf1_short_addr (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_short_addr::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_short_addr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf1_short_addr`] module"]
    pub type INF1_SHORT_ADDR = crate::hal::ral::Reg<inf1_short_addr::INF1_SHORT_ADDR_SPEC>;
    #[doc = ""]
    pub mod inf1_short_addr {
        #[doc = "Register `inf1_short_addr` reader"]
        pub type R = crate::hal::ral::R<INF1_SHORT_ADDR_SPEC>;
        #[doc = "Register `inf1_short_addr` writer"]
        pub type W = crate::hal::ral::W<INF1_SHORT_ADDR_SPEC>;
        #[doc = "Field `mac_inf1_short_addr` reader - "]
        pub type MAC_INF1_SHORT_ADDR_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf1_short_addr` writer - "]
        pub type MAC_INF1_SHORT_ADDR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf1_short_addr(&self) -> MAC_INF1_SHORT_ADDR_R {
                MAC_INF1_SHORT_ADDR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf1_short_addr(&mut self) -> MAC_INF1_SHORT_ADDR_W<INF1_SHORT_ADDR_SPEC> {
                MAC_INF1_SHORT_ADDR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf1_short_addr::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf1_short_addr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF1_SHORT_ADDR_SPEC;
        impl crate::hal::ral::RegisterSpec for INF1_SHORT_ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf1_short_addr::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF1_SHORT_ADDR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf1_short_addr::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF1_SHORT_ADDR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf0_extend_addr1 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_extend_addr1::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_extend_addr1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf0_extend_addr1`] module"]
    pub type INF0_EXTEND_ADDR1 = crate::hal::ral::Reg<inf0_extend_addr1::INF0_EXTEND_ADDR1_SPEC>;
    #[doc = ""]
    pub mod inf0_extend_addr1 {
        #[doc = "Register `inf0_extend_addr1` reader"]
        pub type R = crate::hal::ral::R<INF0_EXTEND_ADDR1_SPEC>;
        #[doc = "Register `inf0_extend_addr1` writer"]
        pub type W = crate::hal::ral::W<INF0_EXTEND_ADDR1_SPEC>;
        #[doc = "Field `mac_inf0_extend_addr1` reader - "]
        pub type MAC_INF0_EXTEND_ADDR1_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf0_extend_addr1` writer - "]
        pub type MAC_INF0_EXTEND_ADDR1_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf0_extend_addr1(&self) -> MAC_INF0_EXTEND_ADDR1_R {
                MAC_INF0_EXTEND_ADDR1_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf0_extend_addr1(
                &mut self,
            ) -> MAC_INF0_EXTEND_ADDR1_W<INF0_EXTEND_ADDR1_SPEC> {
                MAC_INF0_EXTEND_ADDR1_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_extend_addr1::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_extend_addr1::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF0_EXTEND_ADDR1_SPEC;
        impl crate::hal::ral::RegisterSpec for INF0_EXTEND_ADDR1_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf0_extend_addr1::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF0_EXTEND_ADDR1_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf0_extend_addr1::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF0_EXTEND_ADDR1_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf0_extend_addr0 (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_extend_addr0::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_extend_addr0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf0_extend_addr0`] module"]
    pub type INF0_EXTEND_ADDR0 = crate::hal::ral::Reg<inf0_extend_addr0::INF0_EXTEND_ADDR0_SPEC>;
    #[doc = ""]
    pub mod inf0_extend_addr0 {
        #[doc = "Register `inf0_extend_addr0` reader"]
        pub type R = crate::hal::ral::R<INF0_EXTEND_ADDR0_SPEC>;
        #[doc = "Register `inf0_extend_addr0` writer"]
        pub type W = crate::hal::ral::W<INF0_EXTEND_ADDR0_SPEC>;
        #[doc = "Field `mac_inf0_extend_addr0` reader - "]
        pub type MAC_INF0_EXTEND_ADDR0_R = crate::hal::ral::FieldReader<u32>;
        #[doc = "Field `mac_inf0_extend_addr0` writer - "]
        pub type MAC_INF0_EXTEND_ADDR0_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            pub fn mac_inf0_extend_addr0(&self) -> MAC_INF0_EXTEND_ADDR0_R {
                MAC_INF0_EXTEND_ADDR0_R::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf0_extend_addr0(
                &mut self,
            ) -> MAC_INF0_EXTEND_ADDR0_W<INF0_EXTEND_ADDR0_SPEC> {
                MAC_INF0_EXTEND_ADDR0_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_extend_addr0::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_extend_addr0::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF0_EXTEND_ADDR0_SPEC;
        impl crate::hal::ral::RegisterSpec for INF0_EXTEND_ADDR0_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf0_extend_addr0::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF0_EXTEND_ADDR0_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf0_extend_addr0::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF0_EXTEND_ADDR0_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf0_pan_id (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_pan_id::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_pan_id::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf0_pan_id`] module"]
    pub type INF0_PAN_ID = crate::hal::ral::Reg<inf0_pan_id::INF0_PAN_ID_SPEC>;
    #[doc = ""]
    pub mod inf0_pan_id {
        #[doc = "Register `inf0_pan_id` reader"]
        pub type R = crate::hal::ral::R<INF0_PAN_ID_SPEC>;
        #[doc = "Register `inf0_pan_id` writer"]
        pub type W = crate::hal::ral::W<INF0_PAN_ID_SPEC>;
        #[doc = "Field `mac_inf0_pan_id` reader - "]
        pub type MAC_INF0_PAN_ID_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf0_pan_id` writer - "]
        pub type MAC_INF0_PAN_ID_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf0_pan_id(&self) -> MAC_INF0_PAN_ID_R {
                MAC_INF0_PAN_ID_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf0_pan_id(&mut self) -> MAC_INF0_PAN_ID_W<INF0_PAN_ID_SPEC> {
                MAC_INF0_PAN_ID_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_pan_id::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_pan_id::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF0_PAN_ID_SPEC;
        impl crate::hal::ral::RegisterSpec for INF0_PAN_ID_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf0_pan_id::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF0_PAN_ID_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf0_pan_id::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF0_PAN_ID_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "inf0_short_addr (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_short_addr::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_short_addr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inf0_short_addr`] module"]
    pub type INF0_SHORT_ADDR = crate::hal::ral::Reg<inf0_short_addr::INF0_SHORT_ADDR_SPEC>;
    #[doc = ""]
    pub mod inf0_short_addr {
        #[doc = "Register `inf0_short_addr` reader"]
        pub type R = crate::hal::ral::R<INF0_SHORT_ADDR_SPEC>;
        #[doc = "Register `inf0_short_addr` writer"]
        pub type W = crate::hal::ral::W<INF0_SHORT_ADDR_SPEC>;
        #[doc = "Field `mac_inf0_short_addr` reader - "]
        pub type MAC_INF0_SHORT_ADDR_R = crate::hal::ral::FieldReader<u16>;
        #[doc = "Field `mac_inf0_short_addr` writer - "]
        pub type MAC_INF0_SHORT_ADDR_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            pub fn mac_inf0_short_addr(&self) -> MAC_INF0_SHORT_ADDR_R {
                MAC_INF0_SHORT_ADDR_R::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf0_short_addr(&mut self) -> MAC_INF0_SHORT_ADDR_W<INF0_SHORT_ADDR_SPEC> {
                MAC_INF0_SHORT_ADDR_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`inf0_short_addr::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`inf0_short_addr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct INF0_SHORT_ADDR_SPEC;
        impl crate::hal::ral::RegisterSpec for INF0_SHORT_ADDR_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inf0_short_addr::R`](R) reader structure"]
        impl crate::hal::ral::Readable for INF0_SHORT_ADDR_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`inf0_short_addr::W`](W) writer structure"]
        impl crate::hal::ral::Writable for INF0_SHORT_ADDR_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "ctrl_cfg (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrl_cfg::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrl_cfg::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrl_cfg`] module"]
    pub type CTRL_CFG = crate::hal::ral::Reg<ctrl_cfg::CTRL_CFG_SPEC>;
    #[doc = ""]
    pub mod ctrl_cfg {
        #[doc = "Register `ctrl_cfg` reader"]
        pub type R = crate::hal::ral::R<CTRL_CFG_SPEC>;
        #[doc = "Register `ctrl_cfg` writer"]
        pub type W = crate::hal::ral::W<CTRL_CFG_SPEC>;
        #[doc = "Field `hw_auto_ack_tx_en` reader - "]
        pub type HW_AUTO_ACK_TX_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `hw_auto_ack_tx_en` writer - "]
        pub type HW_AUTO_ACK_TX_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `hw_enhance_ack_tx_en` reader - "]
        pub type HW_ENHANCE_ACK_TX_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `hw_enhance_ack_tx_en` writer - "]
        pub type HW_ENHANCE_ACK_TX_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `hw_auto_ack_rx_en` reader - "]
        pub type HW_AUTO_ACK_RX_EN_R = crate::hal::ral::BitReader;
        #[doc = "Field `hw_auto_ack_rx_en` writer - "]
        pub type HW_AUTO_ACK_RX_EN_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `dis_ifs_control` reader - "]
        pub type DIS_IFS_CONTROL_R = crate::hal::ral::BitReader;
        #[doc = "Field `dis_ifs_control` writer - "]
        pub type DIS_IFS_CONTROL_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `pan_coordinator` reader - "]
        pub type PAN_COORDINATOR_R = crate::hal::ral::BitReader;
        #[doc = "Field `pan_coordinator` writer - "]
        pub type PAN_COORDINATOR_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `promiscuous_mode` reader - "]
        pub type PROMISCUOUS_MODE_R = crate::hal::ral::BitReader;
        #[doc = "Field `promiscuous_mode` writer - "]
        pub type PROMISCUOUS_MODE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `dis_frame_version_rsv_filter` reader - "]
        pub type DIS_FRAME_VERSION_RSV_FILTER_R = crate::hal::ral::BitReader;
        #[doc = "Field `dis_frame_version_rsv_filter` writer - "]
        pub type DIS_FRAME_VERSION_RSV_FILTER_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `autopend_enhance` reader - "]
        pub type AUTOPEND_ENHANCE_R = crate::hal::ral::BitReader;
        #[doc = "Field `autopend_enhance` writer - "]
        pub type AUTOPEND_ENHANCE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `filter_enhance` reader - "]
        pub type FILTER_ENHANCE_R = crate::hal::ral::BitReader;
        #[doc = "Field `filter_enhance` writer - "]
        pub type FILTER_ENHANCE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `coex_arb_delay` reader - "]
        pub type COEX_ARB_DELAY_R = crate::hal::ral::FieldReader;
        #[doc = "Field `coex_arb_delay` writer - "]
        pub type COEX_ARB_DELAY_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 5>;
        #[doc = "Field `bit_order` reader - "]
        pub type BIT_ORDER_R = crate::hal::ral::BitReader;
        #[doc = "Field `bit_order` writer - "]
        pub type BIT_ORDER_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `no_rss_trk_enb` reader - "]
        pub type NO_RSS_TRK_ENB_R = crate::hal::ral::BitReader;
        #[doc = "Field `no_rss_trk_enb` writer - "]
        pub type NO_RSS_TRK_ENB_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `force_rx_enb` reader - "]
        pub type FORCE_RX_ENB_R = crate::hal::ral::BitReader;
        #[doc = "Field `force_rx_enb` writer - "]
        pub type FORCE_RX_ENB_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `rx_done_trigger_idle` reader - "]
        pub type RX_DONE_TRIGGER_IDLE_R = crate::hal::ral::BitReader;
        #[doc = "Field `rx_done_trigger_idle` writer - "]
        pub type RX_DONE_TRIGGER_IDLE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `mac_inf0_enable` reader - "]
        pub type MAC_INF0_ENABLE_R = crate::hal::ral::BitReader;
        #[doc = "Field `mac_inf0_enable` writer - "]
        pub type MAC_INF0_ENABLE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `mac_inf1_enable` reader - "]
        pub type MAC_INF1_ENABLE_R = crate::hal::ral::BitReader;
        #[doc = "Field `mac_inf1_enable` writer - "]
        pub type MAC_INF1_ENABLE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `mac_inf2_enable` reader - "]
        pub type MAC_INF2_ENABLE_R = crate::hal::ral::BitReader;
        #[doc = "Field `mac_inf2_enable` writer - "]
        pub type MAC_INF2_ENABLE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        #[doc = "Field `mac_inf3_enable` reader - "]
        pub type MAC_INF3_ENABLE_R = crate::hal::ral::BitReader;
        #[doc = "Field `mac_inf3_enable` writer - "]
        pub type MAC_INF3_ENABLE_W<'a, REG> = crate::hal::ral::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0"]
            #[inline(always)]
            pub fn hw_auto_ack_tx_en(&self) -> HW_AUTO_ACK_TX_EN_R {
                HW_AUTO_ACK_TX_EN_R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            pub fn hw_enhance_ack_tx_en(&self) -> HW_ENHANCE_ACK_TX_EN_R {
                HW_ENHANCE_ACK_TX_EN_R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            pub fn hw_auto_ack_rx_en(&self) -> HW_AUTO_ACK_RX_EN_R {
                HW_AUTO_ACK_RX_EN_R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            pub fn dis_ifs_control(&self) -> DIS_IFS_CONTROL_R {
                DIS_IFS_CONTROL_R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            pub fn pan_coordinator(&self) -> PAN_COORDINATOR_R {
                PAN_COORDINATOR_R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            pub fn promiscuous_mode(&self) -> PROMISCUOUS_MODE_R {
                PROMISCUOUS_MODE_R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            pub fn dis_frame_version_rsv_filter(&self) -> DIS_FRAME_VERSION_RSV_FILTER_R {
                DIS_FRAME_VERSION_RSV_FILTER_R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            pub fn autopend_enhance(&self) -> AUTOPEND_ENHANCE_R {
                AUTOPEND_ENHANCE_R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            pub fn filter_enhance(&self) -> FILTER_ENHANCE_R {
                FILTER_ENHANCE_R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            pub fn coex_arb_delay(&self) -> COEX_ARB_DELAY_R {
                COEX_ARB_DELAY_R::new(((self.bits >> 16) & 0x1f) as u8)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            pub fn bit_order(&self) -> BIT_ORDER_R {
                BIT_ORDER_R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            pub fn no_rss_trk_enb(&self) -> NO_RSS_TRK_ENB_R {
                NO_RSS_TRK_ENB_R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            pub fn force_rx_enb(&self) -> FORCE_RX_ENB_R {
                FORCE_RX_ENB_R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            pub fn rx_done_trigger_idle(&self) -> RX_DONE_TRIGGER_IDLE_R {
                RX_DONE_TRIGGER_IDLE_R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            pub fn mac_inf0_enable(&self) -> MAC_INF0_ENABLE_R {
                MAC_INF0_ENABLE_R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            pub fn mac_inf1_enable(&self) -> MAC_INF1_ENABLE_R {
                MAC_INF1_ENABLE_R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            pub fn mac_inf2_enable(&self) -> MAC_INF2_ENABLE_R {
                MAC_INF2_ENABLE_R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31"]
            #[inline(always)]
            pub fn mac_inf3_enable(&self) -> MAC_INF3_ENABLE_R {
                MAC_INF3_ENABLE_R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn hw_auto_ack_tx_en(&mut self) -> HW_AUTO_ACK_TX_EN_W<CTRL_CFG_SPEC> {
                HW_AUTO_ACK_TX_EN_W::new(self, 0)
            }
            #[doc = "Bit 1"]
            #[inline(always)]
            #[must_use]
            pub fn hw_enhance_ack_tx_en(&mut self) -> HW_ENHANCE_ACK_TX_EN_W<CTRL_CFG_SPEC> {
                HW_ENHANCE_ACK_TX_EN_W::new(self, 1)
            }
            #[doc = "Bit 3"]
            #[inline(always)]
            #[must_use]
            pub fn hw_auto_ack_rx_en(&mut self) -> HW_AUTO_ACK_RX_EN_W<CTRL_CFG_SPEC> {
                HW_AUTO_ACK_RX_EN_W::new(self, 3)
            }
            #[doc = "Bit 5"]
            #[inline(always)]
            #[must_use]
            pub fn dis_ifs_control(&mut self) -> DIS_IFS_CONTROL_W<CTRL_CFG_SPEC> {
                DIS_IFS_CONTROL_W::new(self, 5)
            }
            #[doc = "Bit 6"]
            #[inline(always)]
            #[must_use]
            pub fn pan_coordinator(&mut self) -> PAN_COORDINATOR_W<CTRL_CFG_SPEC> {
                PAN_COORDINATOR_W::new(self, 6)
            }
            #[doc = "Bit 7"]
            #[inline(always)]
            #[must_use]
            pub fn promiscuous_mode(&mut self) -> PROMISCUOUS_MODE_W<CTRL_CFG_SPEC> {
                PROMISCUOUS_MODE_W::new(self, 7)
            }
            #[doc = "Bit 11"]
            #[inline(always)]
            #[must_use]
            pub fn dis_frame_version_rsv_filter(
                &mut self,
            ) -> DIS_FRAME_VERSION_RSV_FILTER_W<CTRL_CFG_SPEC> {
                DIS_FRAME_VERSION_RSV_FILTER_W::new(self, 11)
            }
            #[doc = "Bit 12"]
            #[inline(always)]
            #[must_use]
            pub fn autopend_enhance(&mut self) -> AUTOPEND_ENHANCE_W<CTRL_CFG_SPEC> {
                AUTOPEND_ENHANCE_W::new(self, 12)
            }
            #[doc = "Bit 14"]
            #[inline(always)]
            #[must_use]
            pub fn filter_enhance(&mut self) -> FILTER_ENHANCE_W<CTRL_CFG_SPEC> {
                FILTER_ENHANCE_W::new(self, 14)
            }
            #[doc = "Bits 16:20"]
            #[inline(always)]
            #[must_use]
            pub fn coex_arb_delay(&mut self) -> COEX_ARB_DELAY_W<CTRL_CFG_SPEC> {
                COEX_ARB_DELAY_W::new(self, 16)
            }
            #[doc = "Bit 24"]
            #[inline(always)]
            #[must_use]
            pub fn bit_order(&mut self) -> BIT_ORDER_W<CTRL_CFG_SPEC> {
                BIT_ORDER_W::new(self, 24)
            }
            #[doc = "Bit 25"]
            #[inline(always)]
            #[must_use]
            pub fn no_rss_trk_enb(&mut self) -> NO_RSS_TRK_ENB_W<CTRL_CFG_SPEC> {
                NO_RSS_TRK_ENB_W::new(self, 25)
            }
            #[doc = "Bit 26"]
            #[inline(always)]
            #[must_use]
            pub fn force_rx_enb(&mut self) -> FORCE_RX_ENB_W<CTRL_CFG_SPEC> {
                FORCE_RX_ENB_W::new(self, 26)
            }
            #[doc = "Bit 27"]
            #[inline(always)]
            #[must_use]
            pub fn rx_done_trigger_idle(&mut self) -> RX_DONE_TRIGGER_IDLE_W<CTRL_CFG_SPEC> {
                RX_DONE_TRIGGER_IDLE_W::new(self, 27)
            }
            #[doc = "Bit 28"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf0_enable(&mut self) -> MAC_INF0_ENABLE_W<CTRL_CFG_SPEC> {
                MAC_INF0_ENABLE_W::new(self, 28)
            }
            #[doc = "Bit 29"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf1_enable(&mut self) -> MAC_INF1_ENABLE_W<CTRL_CFG_SPEC> {
                MAC_INF1_ENABLE_W::new(self, 29)
            }
            #[doc = "Bit 30"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf2_enable(&mut self) -> MAC_INF2_ENABLE_W<CTRL_CFG_SPEC> {
                MAC_INF2_ENABLE_W::new(self, 30)
            }
            #[doc = "Bit 31"]
            #[inline(always)]
            #[must_use]
            pub fn mac_inf3_enable(&mut self) -> MAC_INF3_ENABLE_W<CTRL_CFG_SPEC> {
                MAC_INF3_ENABLE_W::new(self, 31)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrl_cfg::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrl_cfg::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CTRL_CFG_SPEC;
        impl crate::hal::ral::RegisterSpec for CTRL_CFG_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctrl_cfg::R`](R) reader structure"]
        impl crate::hal::ral::Readable for CTRL_CFG_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`ctrl_cfg::W`](W) writer structure"]
        impl crate::hal::ral::Writable for CTRL_CFG_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
    #[doc = "command (rw) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`command::R`].  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`command::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@command`] module"]
    pub type COMMAND = crate::hal::ral::Reg<command::COMMAND_SPEC>;
    #[doc = ""]
    pub mod command {
        #[doc = "Register `command` reader"]
        pub type R = crate::hal::ral::R<COMMAND_SPEC>;
        #[doc = "Register `command` writer"]
        pub type W = crate::hal::ral::W<COMMAND_SPEC>;
        #[doc = "Field `opcode` reader - "]
        pub type OPCODE_R = crate::hal::ral::FieldReader;
        #[doc = "Field `opcode` writer - "]
        pub type OPCODE_W<'a, REG> = crate::hal::ral::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            pub fn opcode(&self) -> OPCODE_R {
                OPCODE_R::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7"]
            #[inline(always)]
            #[must_use]
            pub fn opcode(&mut self) -> OPCODE_W<COMMAND_SPEC> {
                OPCODE_W::new(self, 0)
            }
            #[doc = r" Writes raw bits to the register."]
            #[doc = r""]
            #[doc = r" # Safety"]
            #[doc = r""]
            #[doc = r" Passing incorrect value can cause undefined behaviour. See reference manual"]
            #[inline(always)]
            pub unsafe fn bits(&mut self, bits: u32) -> &mut Self {
                self.bits = bits;
                self
            }
        }
        #[doc = "\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`command::R`](R).  You can [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`command::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct COMMAND_SPEC;
        impl crate::hal::ral::RegisterSpec for COMMAND_SPEC {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`command::R`](R) reader structure"]
        impl crate::hal::ral::Readable for COMMAND_SPEC {}
        #[doc = "`write(|w| ..)` method takes [`command::W`](W) writer structure"]
        impl crate::hal::ral::Writable for COMMAND_SPEC {
            const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux = 0;
        }
    }
}
#[no_mangle]
static mut IEEE802154_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "IEEE802154"]
    pub IEEE802154: IEEE802154,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { IEEE802154_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        IEEE802154_PERIPHERALS = true;
        Peripherals {
            IEEE802154: IEEE802154 {
                _marker: PhantomData,
            },
        }
    }
}
